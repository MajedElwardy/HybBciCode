library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nAverages, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nAverages, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nAverages, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
iS<-1
nRunsForTrain <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_%dRunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", nRunsForTrain, iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
str(accData1)
summary(accData1)
library(nlme)
library(lme4)
library(nlme)
packageDescription("(nlme")["Version"]
packageDescription("nlme")["Version"]
inst <- packageStatus()$inst
inst
summary(inst)
inst[inst$Status != "ok",]
inst[inst$Status != "ok", c("Package", "Version", "Status")]
update.packages()
filename <- "psdDataset_Oz_Ha1"
fileDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP/04-watchSSVEP-PSD"
fullfilename <- file.path( fileDir, paste0(filename, ".csv") )
psdData <- read.csv(fullfilename, header = TRUE)
psdData$frequency = as.factor(psdData$frequency)
psdData$oddball = as.factor(psdData$oddball)
psdData$fileNb = as.factor(psdData$fileNb)
psdData$trial = as.factor(psdData$trial)
#   psdData$psd = sqrt(psdData$psd)
str(psdData)
summary(psdData)
psdData <- read.csv(fullfilename, header = TRUE)
psdData$frequency = as.factor(psdData$frequency)
psdData$oddball = as.factor(psdData$oddball)
psdData$fileNb = as.factor(psdData$fileNb)
psdData$trial = as.factor(psdData$trial)
#   psdData$psd = sqrt(psdData$psd)
str(psdData)
summary(psdData)
filename <- psdDataset_CP1_Ha2
filename <- "psdDataset_CP1_Ha2"
fileDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP/04-watchSSVEP-PSD"
fullfilename <- file.path( fileDir, paste0(filename, ".csv") )
psdData <- read.csv(fullfilename, header = TRUE)
psdData$frequency = as.factor(psdData$frequency)
psdData$oddball = as.factor(psdData$oddball)
psdData$fileNb = as.factor(psdData$fileNb)
psdData$trial = as.factor(psdData$trial)
#   psdData$psd = sqrt(psdData$psd)
str(psdData)
summary(psdData)
psdData$psd <- psdData$psdNorm
pp <- ggplot( psdData, aes(stimDuration, psd, colour=oddball ) )
pp <- pp + stat_summary(fun.data = mean_cl_normal, geom="pointrange", position = position_dodge(0.2))
pp <- pp + facet_grid( subject ~ frequency, scales = "free_y"  )
pp <- cleanPlot(pp)
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
pp <- ggplot( psdData, aes(stimDuration, psd, colour=oddball ) )
pp <- pp + stat_summary(fun.data = mean_cl_normal, geom="pointrange", position = position_dodge(0.2))
pp <- pp + facet_grid( subject ~ frequency, scales = "free_y"  )
pp <- cleanPlot(pp)
pp
pp2 <- ggplot( psdData, aes(stimDuration, psd, colour=frequency ) )
pp2 <- pp2 + stat_summary(fun.data = mean_cl_normal, geom="pointrange", position = position_dodge(0.4))
pp2 <- pp2 + facet_grid( oddball ~ subject, scales = "free_y"  )
pp2 <- cleanPlot(pp2)
pp2
factorList <- c("stimDuration", "frequency", "oddball")
outcome <- "psd"
dataframe <- psdData
plotFactorMeans_InteractionGraphs(dataframe, factorList, outcome)
filename <- "fftDataset_Oz_1024fs"
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
fileDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP/03-xxx-watchFFT"
fullfilename <- file.path( fileDir, paste0(filename, ".csv") )
psdData <- read.csv(fullfilename, header = TRUE)
psdData$frequency = as.factor(psdData$frequency)
psdData$oddball = as.factor(psdData$oddball)
psdData$fileNb = as.factor(psdData$fileNb)
psdData$trial = as.factor(psdData$trial)
psdData$psd = psdData$fftVals
str(psdData)
summary(psdData)
pp <- ggplot( psdData, aes(stimDuration, psd, colour=oddball ) )
pp <- pp + stat_summary(fun.data = mean_cl_normal, geom="pointrange", position = position_dodge(0.2))
pp <- pp + facet_grid( subject ~ frequency, scales = "free_y"  )
pp <- cleanPlot(pp)
pp
factorList <- c("stimDuration", "frequency", "oddball")
outcome <- "psd"
dataframe <- psdData
plotFactorMeans_InteractionGraphs(dataframe, factorList, outcome)
filename <- "fftDataset_Oz_1024fs_adjTime"
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
fileDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP/03-xxx-watchFFT"
fullfilename <- file.path( fileDir, paste0(filename, ".csv") )
psdData <- read.csv(fullfilename, header = TRUE)
psdData$frequency = as.factor(psdData$frequency)
psdData$oddball = as.factor(psdData$oddball)
psdData$fileNb = as.factor(psdData$fileNb)
psdData$trial = as.factor(psdData$trial)
psdData$psd = psdData$fftVals
str(psdData)
summary(psdData)
pp <- ggplot( psdData, aes(stimDuration, psd, colour=oddball ) )
pp <- pp + stat_summary(fun.data = mean_cl_normal, geom="pointrange", position = position_dodge(0.2))
pp <- pp + facet_grid( subject ~ frequency, scales = "free_y"  )
pp <- cleanPlot(pp)
pp
factorList <- c("stimDuration", "frequency", "oddball")
outcome <- "psd"
dataframe <- psdData
plotFactorMeans_InteractionGraphs(dataframe, factorList, outcome)
source("d:/KULeuven/PhD/rLibrary/plotInteractionGraphs_level2.R")
dataframe <- psdData
outcome <- "psd"
xFactor <- "stimDuration"
factorList <- c("oddball", "frequency")
plotInteractionGraphs_level2(dataframe, xFactor, outcome, factorList)
filename <- "fftDataset_O2_1024fs"
fileDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP/03-xxx-watchFFT"
fullfilename <- file.path( fileDir, paste0(filename, ".csv") )
psdData <- read.csv(fullfilename, header = TRUE)
psdData$frequency = as.factor(psdData$frequency)
psdData$oddball = as.factor(psdData$oddball)
psdData$fileNb = as.factor(psdData$fileNb)
psdData$trial = as.factor(psdData$trial)
psdData$psd = psdData$fftVals
str(psdData)
summary(psdData)
factorList <- c("stimDuration", "frequency", "oddball")
outcome <- "psd"
dataframe <- psdData
plotFactorMeans_InteractionGraphs(dataframe, factorList, outcome)
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
plotFactorMeans_InteractionGraphs(dataframe, factorList, outcome)
filename
filename <- "fftDataset_Oz_1024fs"
fileDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP/03-xxx-watchFFT"
fullfilename <- file.path( fileDir, paste0(filename, ".csv") )
psdData <- read.csv(fullfilename, header = TRUE)
psdData$frequency = as.factor(psdData$frequency)
psdData$oddball = as.factor(psdData$oddball)
psdData$fileNb = as.factor(psdData$fileNb)
psdData$trial = as.factor(psdData$trial)
psdData$psd = psdData$fftVals
str(psdData)
summary(psdData)
factorList <- c("stimDuration", "frequency", "oddball")
outcome <- "psd"
dataframe <- psdData
plotFactorMeans_InteractionGraphs(dataframe, factorList, outcome)
filename <- "fftDataset_Oz_1024fs_adjTime"
fileDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP/03-xxx-watchFFT"
fullfilename <- file.path( fileDir, paste0(filename, ".csv") )
psdData <- read.csv(fullfilename, header = TRUE)
psdData$frequency = as.factor(psdData$frequency)
psdData$oddball = as.factor(psdData$oddball)
psdData$fileNb = as.factor(psdData$fileNb)
psdData$trial = as.factor(psdData$trial)
psdData$psd = psdData$fftVals
str(psdData)
summary(psdData)
factorList <- c("stimDuration", "frequency", "oddball")
outcome <- "psd"
dataframe <- psdData
plotFactorMeans_InteractionGraphs(dataframe, factorList, outcome)
Z <- rbinom(1000, 1, 0.1)
Z
W <- round(rnorm(1000, 100, 40))
W
W[W < 1] <- 1
sum(Z*W)/sum(W)
library(boot)
library(reshape)
dataset <- data.frame(Person = c(rep("A", 20), rep("B", 10)), Success = c(rbinom(20, 1, 0.25), rbinom(10, 1, 0.75)))
dataset
Aggregated <- cast(Person ~ ., data = dataset, value = "Success", fun = list(mean, length))
library(reshape2)
Aggregated <- cast(Person ~ ., data = dataset, value = "Success", fun = list(mean, length))
install.packages("reshape")
library(reshape)
Aggregated <- cast(Person ~ ., data = dataset, value = "Success", fun = list(mean, length))
Aggregated
dataset
m0 <- glm(Success ~ 1, data = dataset, family = binomial)
m1 <- glm(mean ~ 1, data = Aggregated, family = binomial, weights = length)
inv.logit(coef(m0))
inv.logit(coef(m1))
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/")
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/")
rm(list = ls())
library(ggplot2)
library(reshape2)
# library(geepack)
source("createDataFrame.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
aveClass <- 0
nRunsForTrain <- 2
FS <- 128
nFoldSvm <- 10
accData <- createDataFrame(aveClass, nRunsForTrain, FS, nFoldSvm)
accData <- accData[accData$subject != "S08", ]
accData$subject <- droplevels(accData$subject)
names(airquality) <- tolower(names(airquality))
names(airquality)
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
names(ChickWeight) <- tolower(names(ChickWeight))
chick_m <- melt(ChickWeight, id=2:4, na.rm=TRUE)
chick_m
dcast(chick_m, time ~ variable, mean)
library(plyr)
ddply
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/")
rm(list = ls())
library(ggplot2)
library(plyr)
# library(geepack)
source("createDataFrame.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
aveClass <- 0
nRunsForTrain <- 2
FS <- 128
nFoldSvm <- 10
accData <- createDataFrame(aveClass, nRunsForTrain, FS, nFoldSvm)
accData <- accData[accData$subject != "S08", ]
accData$subject <- droplevels(accData$subject)
varList <- c("subject", "condition", "trial", "nRep", "correctness")
accData <- accData[ accData$classifier=="normal", names(accData) %in% varList ]
accData <- accData[, varList]
varList <- c("subject", "condition", "nRep")
temp <- ddply(
accData
, varList
, summarise
, acc = mean(correctness)
, nTrial = length(correctness)
)
temp
16200/36
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/")
rm(list = ls())
library(ggplot2)
library(plyr)
# library(geepack)
source("createDataFrame.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
##############################################################################################################################
##############################################################################################################################
aveClass <- 0
nRunsForTrain <- 2
FS <- 128
nFoldSvm <- 10
accData <- createDataFrame(aveClass, nRunsForTrain, FS, nFoldSvm)
accData <- accData[accData$subject != "S08", ]
accData$subject <- droplevels(accData$subject)
##############################################################################################################################
##############################################################################################################################
varList <- c("subject", "condition", "trial", "nRep", "correctness")
accData <- accData[ accData$classifier=="normal", names(accData) %in% varList ]
accData <- accData[, varList]
varList <- c("subject", "condition", "nRep")
accData1 <- ddply(
accData
, varList
, summarise
, acc = mean(correctness)
, nTrial = length(correctness)
)
accData1 <- accData1[with(accData1, order(subject, condition, nRep)), ]
accData1$nRepFac <- as.factor(accData1$nRep)
##############################################################################################################################
##############################################################################################################################
library(geepack)
m1.ar1 = geeglm( acc ~ condition*nRepFac
m1.ar1 = geeglm( acc ~ condition*nRepFac
, data = accData1
, id = subject
, weights = nTrial
, family = binomial
, corstr = "ar1"
)
m1.ar1
summary(m1.ar1)
m1.unst = geeglm( acc ~ condition*nRepFac
, data = accData1
, id = subject
, weights = nTrial
, family = binomial
, corstr = "unstructured"
)
summary(m1.unst)
summary(m1.ar1)
m2.ar1 = geeglm( acc ~ condition*nRepFac
, data = accData1
, id = interaction(subject, condition)
, weights = nTrial
, family = binomial
, corstr = "ar1"
)
summary(m2.ar1)
summary(m1.ar1)
summary(m1.ar1)
m3.ar1 = geeglm( acc ~ nRepFac
, data = accData1
, id = interaction(subject, condition)
, weights = nTrial
, family = binomial
, corstr = "ar1"
)
anova(m3.ar1, m2.ar1)
anova(m3.ar1, m1.ar1)
test<-structure(list(subject = structure(c(1, 1, 1, 1, 1, 1, 1, 1,
2, 2, 2, 2, 2, 2, 2, 2), .Label = c("S1", "S2"), class = "factor"),
time = c(0, 7, 15, 22, 32, 39, 46, 53, 0, 7, 14, 24, 28,
34, 41, 48), noccup = c(0, 1, 2, 1, 6, 4, 3, 3, 0, 18,
21, 14, 7, 14, 12, 8), ntotal = c(100, 100, 100, 100, 100,     100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100)), .Names = c("subject",
"time", "noccup", "ntotal"), class = "data.frame", row.names = c("1",
"2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13",
"14", "15", "16"))
test
m1<-lmer(noccup/ntotal~time+(time|subject),family=binomial,weights=ntotal)
library(lme4)
m1<-lmer(noccup/ntotal~time+(time|subject),family=binomial,weights=ntotal)
test
m1<-lmer(noccup/ntotal~time+(time|subject),family=binomial,weights=ntotal, data=test)
m²
m1
library(glmmPQL)
install.packages("glmmPQL")
library(glmmPQL)
library(MASS)
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/")
rm(list = ls())
library(ggplot2)
library(plyr)
library(MASS)
# library(geepack)
source("createDataFrame.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
##############################################################################################################################
##############################################################################################################################
aveClass <- 0
nRunsForTrain <- 2
FS <- 128
nFoldSvm <- 10
accData <- createDataFrame(aveClass, nRunsForTrain, FS, nFoldSvm)
accData <- accData[accData$subject != "S08", ]
accData$subject <- droplevels(accData$subject)
##############################################################################################################################
##############################################################################################################################
varList <- c("subject", "condition", "trial", "nRep", "correctness")
accData <- accData[ accData$classifier=="normal", names(accData) %in% varList ]
accData <- accData[, varList]
varList <- c("subject", "condition", "nRep")
accData1 <- ddply(
accData
, varList
, summarise
, acc = mean(correctness)
, nTrial = length(correctness)
)
accData1 <- accData1[with(accData1, order(subject, condition, nRep)), ]
accData1$nRepFac <- as.factor(accData1$nRep)
m1 <- glmmPQL(
fixed = acc ~ nRep*condition
, random = 1 | subject/condition
, family = binomial
, data = accData
, correlation=corAR1(form=~nRep)
, weights = nTrial
)
m1 <- glmmPQL(
fixed = acc ~ nRep*condition
, random = ~1 | subject/condition
, family = binomial
, data = accData
, correlation=corAR1(form=~nRep)
, weights = nTrial
)
m1 <- glmmPQL(
fixed = acc ~ nRep*condition
, random = ~1 | subject/condition
, family = binomial
, data = accData1
, correlation=corAR1(form=~nRep)
, weights = nTrial
)
m1
summary(m1)
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/")
rm(list = ls())
library(ggplot2)
library(plyr)
library(MASS)
# library(geepack)
source("createDataFrame.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
##############################################################################################################################
##############################################################################################################################
aveClass <- 0
nRunsForTrain <- 2
FS <- 128
nFoldSvm <- 10
accData <- createDataFrame(aveClass, nRunsForTrain, FS, nFoldSvm)
accData <- accData[accData$subject != "S08", ]
accData$subject <- droplevels(accData$subject)
##############################################################################################################################
##############################################################################################################################
varList <- c("subject", "condition", "trial", "nRep", "correctness")
accData <- accData[ accData$classifier=="normal", names(accData) %in% varList ]
accData1 <- accData[, varList]
accData1 <- accData1[with(accData1, order(subject, condition, trial, nRep)), ]
accData1$nRepFac <- as.factor(accData1$nRep)
m1 <- glmmPQL(
fixed = acc ~ nRep*condition
, random = ~1 | subject/trial
, family = binomial
, data = accData1
, correlation=corAR1(form=~nRep)
)
m1 <- glmmPQL(
fixed = correctness ~ nRep*condition
, random = ~1 | subject/trial
, family = binomial
, data = accData1
, correlation=corAR1(form=~nRep)
)
str(accData1)
accData1$trialInSub <- as.factor( as.numeric( accData$condition:accData1$trial ) )
accData1$trialInSub <- as.factor( as.numeric( accData$condition : accData1$trial ) )
m1 <- glmmPQL(
fixed = correctness ~ nRep*condition
, random = ~1 | subject/trialInSub
, family = binomial
, data = accData1
, correlation=corAR1(form=~nRep)
)
m1
summary(m1)
36*5
source('D:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/glmmPQLPack/aggregate.R', echo=TRUE)
summary(m1)
source('D:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/glmmPQLPack/aggregate.R', echo=TRUE)
anova(m1, m0)

demo()
install.packages()
cd
ls
politeness <- read.csv(file.choose( ))
politeness2 <- read.csv(file."d:\KULeuven\PhD\Courses-Tutorial\R-statistics\linearMixedModelWithR\politeness_data.csv");
politeness2 <- read.csv(file."d:/KULeuven/PhD/Courses-Tutorial/R-statistics/linearMixedModelWithR/politeness_data.csv");
politeness2 <- read.csv(file="d:/KULeuven/PhD/Courses-Tutorial/R-statistics/linearMixedModelWithR/politeness_data.csv");
rm(list=ls())
politeness <- read.csv(file="d:/KULeuven/PhD/Courses-Tutorial/R-statistics/linearMixedModelWithR/politeness_data.csv");
head()
head(politeness)
View(politeness)
View(politeness)
summary(politeness)
str(politeness)
colnames(politeness)
which(is.na(politeness)==T)
View(politeness)
boxplot(frequency ~ attitude, data=politeness)
#median(politeness[which(politeness$attitude=="pol"),]$frequency, na.rm=T)
T
#which(is.na(politeness)==T)
median(politeness[which(politeness$attitude=="pol"),]$frequency, na.rm=T)
library(lme4);library(languageR);
rm(list=ls());
politeness <- read.csv(file="d:/KULeuven/PhD/Courses-Tutorial/R-statistics/linearMixedModelWithR/politeness_data.csv");
#which(is.na(politeness)==T)
boxplot(frequency ~ attitude, data=politeness)
median(politeness[which(politeness$attitude=="pol"),]$frequency, na.rm=T)
median(politeness[which(politeness$attitude=="inf"),]$frequency)
boxplot(frequency ~ attitude*gender, data=politeness)
View(politeness)
View(politeness)
lmer(frequency ~ attitude, data=politeness)
politeness.model = lmer(frequency ~ attitude + (1|subject) + (1|scenario), data=politeness)
politeness.model
politeness.model.p = pvals.fnc(politeness.model)
politeness.model.p
View(politeness)
mean(politeness$frequency, na.rm=T)
mean(politeness[which(politeness$gender == "F"),]$frequency)
mean(politeness[which(politeness$gender == "M"),]$frequency)
mean(politeness[which(politeness$gender == "M"),]$frequency, na.rm=T)
politeness.model = lmer(frequency ~ attitude*gender + (1|subject) + (1|scenario), data=politeness)
politeness.model.p = pvals.fnc(politeness.model)
politeness.model.p
plot(fitted(politeness.model),residuals(politeness.model))
politeness.null = lmer(frequency ~ 1 + (1|subject) + (1|scenario), data=politeness)
anova(politeness.model, politeness.null)
??read
test <- scan(file="accuracyDataset.txt")
test <- scan(file="d:\KULeuven\PhD\Work\PatientStudy\statisticLME\accuracyDataset.txt")
test <- scan(file="d:/KULeuven/PhD/Work/PatientStudy/statisticLME/accuracyDataset.txt")
test <- read.table("d:/KULeuven/PhD/Work/PatientStudy/statisticLME/accuracyDataset.txt", header = TRUE, row.names = 1)
test <- read.table("d:/KULeuven/PhD/Work/PatientStudy/statisticLME/accuracyDataset.txt", header = TRUE)
View(test)
rm(list=ls());
accDataset <- read.table("d:/KULeuven/PhD/Work/PatientStudy/statisticLME/accuracyDataset.txt", header = TRUE)
boxplot(accuracy ~ system, data=accDataset)
boxplot(accuracy ~ system*timePerSymbol, data=accDataset)
View(accDataset)
View(accDataset)
accDataset.model = lmer(accuracy ~ system + (1|subject) + (1|timePerSymbol), data=accDataset)
accDataset.model.p = pvals.fnc(accDataset.model)
accDataset.model.p
accDataset.model = lmer(accuracy ~ system + (1|subject), data=accDataset)
accDataset.model.p = pvals.fnc(accDataset.model)
accDataset.model.p
accDataset.model = lmer(accuracy ~ system*timePerSymbol + (1|subject), data=accDataset)
accDataset.model.p = pvals.fnc(accDataset.model)
accDataset.model.p
library(lme4);library(languageR);
rm(list=ls());
accDataset <- read.table("d:/KULeuven/PhD/Work/PatientStudy/statisticLME/accuracyDataset.txt", header = TRUE)
boxplot(accuracy ~ system, data=accDataset)
boxplot(accuracy ~ system*timePerSymbol, data=accDataset)
accDataset.model = lmer(accuracy ~ system + (1|subject), data=accDataset)
accDataset.model.p = pvals.fnc(accDataset.model)
accDataset.model.p
accDataset.model = lmer(accuracy ~ system + (1|subject) + (1|timePerSymbol), data=accDataset)
accDataset.model.p = pvals.fnc(accDataset.model)
accDataset.model.p
accDataset.model = lmer(accuracy ~ system*timePerSymbol + (1|subject), data=accDataset)
accDataset.model.p = pvals.fnc(accDataset.model)
accDataset.model.p
View(accDataset)
View(accDataset)
library(lme4)
library(lme4)
str(Dyestuff)
head(Dyestuff)
summary(Dyestuff)
print(dotplot(reorder(Batch, Yield) ~ Yield, Dyestuff,
ylab = "Batch", jitter.y = TRUE, pch = 21,
xlab = "Yield of dyestuff (grams of standard color)",
type = c("p", "a")))
library(lme4);library(languageR);
rm(list=ls());
politeness <- read.csv(file="d:/KULeuven/PhD/Courses-Tutorial/R-statistics/linearMixedModelWithR/politeness_data.csv");
politeness <- read.csv(file="d:\KULeuven\PhD\Statistics\LMEStuffs\Winter (2011) A very basic tutorial for performing linear mixed effects analyses\politeness_data.csv");
politeness <- read.csv(file="d:/KULeuven/PhD/Statistics/LMEStuffs/Winter (2011) A very basic tutorial for performing linear mixed effects analyses/politeness_data.csv");
head()
head(politeness)
summary(politeness)
str(politeness)
colnamesstr(politeness)
colnames(politeness)
which(is.na(politeness)==T)
View(politeness)
56*4
56*4+39
clc
source('D:/KULeuven/PhD/Statistics/LMEStuffs/Winter (2011) A very basic tutorial for performing linear mixed effects analyses/RScriptLMM.R')
source('D:/KULeuven/PhD/Statistics/LMEStuffs/Winter (2011) A very basic tutorial for performing linear mixed effects analyses/RScriptLMM.R')
fix(politeness.model)
summary(politeness)
boxplot(frequency ~ attitude, data=politeness)
rm(list=ls());
politeness <- read.csv(file="d:/KULeuven/PhD/Statistics/LMEStuffs/Winter (2011) A very basic tutorial for performing linear mixed effects analyses/politeness_data.csv");
boxplot(frequency ~ attitude, data=politeness)
median(politeness[which(politeness$attitude=="pol"),]$frequency, na.rm=T)
median(politeness[which(politeness$attitude=="pol"),]$frequency, na.rm=T)
median(politeness[which(politeness$attitude=="inf"),]$frequency)
boxplot(frequency ~ attitude*gender, data=politeness)
politeness.model = lmer(frequency ~ attitude + (1|subject) + (1|scenario), data=politeness)
politeness.model
14.544^2
politeness.model.p = pvals.fnc(politeness.model)
politeness.model.p
mean(politeness$frequency, na.rm=T)
mean(politeness[which(politeness$gender == "F"),]$frequency)
mean(politeness[which(politeness$gender == "M"),]$frequency)
mean(politeness[which(politeness$gender == "M"),]$frequency, na.rm=T)
politeness.model = lmer(frequency ~ attitude*gender + (1|subject) + (1|scenario), data=politeness)
politeness.model
politeness.model.p = pvals.fnc(politeness.model)
politeness.model.p
plot(fitted(politeness.model),residuals(politeness.model))
example3 <- read.table("http://www.unt.edu/rss/class/Jon/R_SC/Module3/ExampleData3.txt", header=TRUE, sep="", na.strings="NA", dec=".", strip.white=TRUE)
summary(example3)
head(example3, 15)
attributes(example3)
library(lme4)
?lme4
?lmer
(1997). The data frame contains measurements of heart and body weight
install.packages("tools")
install.packages("stringr")
install.packages("tools")
install.packages("patchDVI", repos="http://R-Forge.R-project.org")
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
str(accData1)
summary(accData1)
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nRep, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nRep, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nAverages, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nAverages, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nAverages, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
iS<-1
nRunsForTrain <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_%dRunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", nRunsForTrain, iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
str(accData1)
summary(accData1)
library(nlme)
library(lme4)
library(nlme)
packageDescription("(nlme")["Version"]
packageDescription("nlme")["Version"]
inst <- packageStatus()$inst
inst
summary(inst)
inst[inst$Status != "ok",]
inst[inst$Status != "ok", c("Package", "Version", "Status")]
update.packages()
source('D:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/compareClassifiers.R', echo=TRUE)
save(lm1
, lm2
, lm3
, lm4
, lm5
, lm6
, lm7
, file = "logisticModelsClassifiers.RData")
summary(lm1)
anova(lm1, lm2)
anova(lm2, lm5)
anova(lm2, lm3)
anova(lm2, lm4)
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
source("createDataFrame.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
########################################################################################################################
########################################################################################################################
aveClass <- 0
nRunsForTrain <- 2
FS <- 128
nFoldSvm <- 10
accData <- createDataFrame(aveClass, nRunsForTrain, FS, nFoldSvm)
accData <- accData[accData$condition != "oddball", ]
accData$condition <- droplevels(accData$condition)
accData$frequency <- droplevels(accData$frequency)
accData <- accData[accData$classifier != "pooled",]
accData$classifier <- droplevels(accData$classifier)
accData <- accData[accData$subject != "S08", ]
accData$subject <- droplevels(accData$subject)
str(accData)
summary(accData)
########################################################################################################################
########################################################################################################################
pp <- ggplot( accData, aes(nRep, correctness, colour=classifier) )
pp <- pp + stat_summary(fun.y = mean, geom = "line", width = 0.2)
pp <- cleanPlot(pp)
print(pp)
pp2 <- pp + facet_wrap(~subject)
print(pp2)
pp3 <- pp + facet_wrap(~condition)
print(pp3)
pp <- ggplot( accData, aes(nRep, correctness, colour=classifier) )
pp <- pp + stat_summary(fun.y = mean, geom = "line", aes(group=classifier), width = 0.2)
pp <- cleanPlot(pp)
pp <- pp + facet_grid(condition~subject)
print(pp)
pp <- ggplot( accData, aes(nRep, correctness, colour=classifier, shape=condition) )
pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5), size = 3)
pp <- pp + facet_wrap( ~subject )
pp <- cleanPlot(pp)
pp
########################################################################################################################
########################################################################################################################
lmH1 <- glmer( correctness ~ frequency * nRepFac * classifier + ( 1 | subject/nRepFac ), data = accData, family = binomial )
lmH0 <- glmer( correctness ~ frequency * nRepFac + ( 1 | subject/nRepFac ), data = accData, family = binomial )
anova(lmH1, lmH0)
summary(lmH1)
anova(lmH1, lmH0)
pp <- ggplot( accData, aes(nRepFac, correctness, colour=classifier) )
pp <- pp + stat_summary(fun.y = mean, geom = "line", aes(group=classifier), width = 0.2)
pp <- pp + facet_wrap(~condition)
pp <- cleanPlot(pp)
print(pp)
accData <- createDataFrame(aveClass, nRunsForTrain, FS, nFoldSvm)
accData <- accData[accData$condition != "oddball", ]
accData$condition <- droplevels(accData$condition)
accData$frequency <- droplevels(accData$frequency)
accData <- accData[accData$classifier != "pooledAll",]
accData$classifier <- droplevels(accData$classifier)
accData <- accData[accData$subject != "S08", ]
accData$subject <- droplevels(accData$subject)
str(accData)
summary(accData)
pp <- ggplot( accData, aes(nRepFac, correctness, colour=classifier) )
pp <- pp + stat_summary(fun.y = mean, geom = "line", aes(group=classifier), width = 0.2)
pp <- pp + facet_wrap(~condition)
pp <- cleanPlot(pp)
print(pp)
lmH1b <- glmer( correctness ~ frequency * nRepFac * classifier + ( 1 | subject/nRepFac ), data = accData, family = binomial )
lmH0b <- glmer( correctness ~ frequency * nRepFac + ( 1 | subject/nRepFac ), data = accData, family = binomial )
anova(lmH1b, lmH0b)

accDataset.model.p
accDataset.model = lmer(accuracy ~ system*timePerSymbol + (1|subject), data=accDataset)
accDataset.model.p = pvals.fnc(accDataset.model)
accDataset.model.p
View(accDataset)
View(accDataset)
library(lme4)
library(lme4)
str(Dyestuff)
head(Dyestuff)
summary(Dyestuff)
print(dotplot(reorder(Batch, Yield) ~ Yield, Dyestuff,
ylab = "Batch", jitter.y = TRUE, pch = 21,
xlab = "Yield of dyestuff (grams of standard color)",
type = c("p", "a")))
library(lme4);library(languageR);
rm(list=ls());
politeness <- read.csv(file="d:/KULeuven/PhD/Courses-Tutorial/R-statistics/linearMixedModelWithR/politeness_data.csv");
politeness <- read.csv(file="d:\KULeuven\PhD\Statistics\LMEStuffs\Winter (2011) A very basic tutorial for performing linear mixed effects analyses\politeness_data.csv");
politeness <- read.csv(file="d:/KULeuven/PhD/Statistics/LMEStuffs/Winter (2011) A very basic tutorial for performing linear mixed effects analyses/politeness_data.csv");
head()
head(politeness)
summary(politeness)
str(politeness)
colnamesstr(politeness)
colnames(politeness)
which(is.na(politeness)==T)
View(politeness)
56*4
56*4+39
clc
source('D:/KULeuven/PhD/Statistics/LMEStuffs/Winter (2011) A very basic tutorial for performing linear mixed effects analyses/RScriptLMM.R')
source('D:/KULeuven/PhD/Statistics/LMEStuffs/Winter (2011) A very basic tutorial for performing linear mixed effects analyses/RScriptLMM.R')
fix(politeness.model)
summary(politeness)
boxplot(frequency ~ attitude, data=politeness)
rm(list=ls());
politeness <- read.csv(file="d:/KULeuven/PhD/Statistics/LMEStuffs/Winter (2011) A very basic tutorial for performing linear mixed effects analyses/politeness_data.csv");
boxplot(frequency ~ attitude, data=politeness)
median(politeness[which(politeness$attitude=="pol"),]$frequency, na.rm=T)
median(politeness[which(politeness$attitude=="pol"),]$frequency, na.rm=T)
median(politeness[which(politeness$attitude=="inf"),]$frequency)
boxplot(frequency ~ attitude*gender, data=politeness)
politeness.model = lmer(frequency ~ attitude + (1|subject) + (1|scenario), data=politeness)
politeness.model
14.544^2
politeness.model.p = pvals.fnc(politeness.model)
politeness.model.p
mean(politeness$frequency, na.rm=T)
mean(politeness[which(politeness$gender == "F"),]$frequency)
mean(politeness[which(politeness$gender == "M"),]$frequency)
mean(politeness[which(politeness$gender == "M"),]$frequency, na.rm=T)
politeness.model = lmer(frequency ~ attitude*gender + (1|subject) + (1|scenario), data=politeness)
politeness.model
politeness.model.p = pvals.fnc(politeness.model)
politeness.model.p
plot(fitted(politeness.model),residuals(politeness.model))
example3 <- read.table("http://www.unt.edu/rss/class/Jon/R_SC/Module3/ExampleData3.txt", header=TRUE, sep="", na.strings="NA", dec=".", strip.white=TRUE)
summary(example3)
head(example3, 15)
attributes(example3)
library(lme4)
?lme4
?lmer
(1997). The data frame contains measurements of heart and body weight
install.packages("tools")
install.packages("stringr")
install.packages("tools")
install.packages("patchDVI", repos="http://R-Forge.R-project.org")
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
str(accData1)
summary(accData1)
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nRep, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nRep, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nAverages, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nAverages, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nAverages, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
iS<-1
nRunsForTrain <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_%dRunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", nRunsForTrain, iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
str(accData1)
summary(accData1)
library(nlme)
library(lme4)
library(nlme)
packageDescription("(nlme")["Version"]
packageDescription("nlme")["Version"]
inst <- packageStatus()$inst
inst
summary(inst)
inst[inst$Status != "ok",]
inst[inst$Status != "ok", c("Package", "Version", "Status")]
update.packages()
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/")
rm(list = ls())
library(ggplot2)
library(plyr)
library(car)
# library(reshape2)
# library(lme4)
# library(LMERConvenienceFunctions)
# library(languageR)
# library(Hmisc)
source("createDataFrame.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
aveClass <- 0
nRunsForTrain <- 2
FS <- 128
nFoldSvm <- 10
accData <- createDataFrame(aveClass, nRunsForTrain, FS, nFoldSvm)
accData <- accData[accData$subject != "S08",]
accData$subject <- revalue(accData$subject, c("S09"="S08", "S10"="S09"))
accData$subject <- droplevels(accData$subject)
# levels(accData$subject)
accData <- accData[accData$classifier != "pooled",]
accData$classifier <- droplevels(accData$classifier)
accData <- accData[accData$condition != "oddball", ]
accData$condition <- droplevels(accData$condition)
accData$frequency <- droplevels(accData$frequency)
accData$classifier <- revalue( accData$classifier
, c("normal"="specific"
, "pooledAll"="general")
str(accData)
summary(accData)
#################################################################################################################
#                                                                                                               #
#                                         PLOT PER SUBJECT DATA                                                 #
#                                                                                                               #
#################################################################################################################
varList <- c("subject", "nRepFac", "classifier")
accData2 <- ddply( accData, varList, summarize
, meanCorr = mean(correctness)
, nRep = unique(nRep)
)
varList <- c("nRepFac", "classifier")
temp <- ddply( accData, varList, summarize
, meanCorr = mean(correctness)
, nRep = unique(nRep)
)
temp$subject <- "grand mean"
accData2 <- rbind(accData2, temp)
str(accData2)
summary(accData2)
pp <- ggplot( accData2, aes(nRepFac, meanCorr, colour=classifier) )
pp <- pp + geom_point(width = 0.2, position = position_dodge(.3))
pp <- pp + geom_line(aes(group=classifier), width = 0.2, position = position_dodge(.3))
pp <- pp + facet_wrap( ~subject ) + xlab("number of repetitions") + ylab("accuracy")
pp <- cleanPlot(pp)
pp <- pp + theme(legend.position=c(5/8,1/6))
print(pp)
pp2 <- pp + facet_grid( frequency~subject )
pp2
pp <- ggplot( accData, aes(nRepFac, correctness, colour=classifier) )
pp <- pp + stat_summary(fun.y = mean, geom = "line", width = 0.2)
pp <- pp + facet_wrap(~condition)
pp <- cleanPlot(pp)
print(pp)
str(accData)
summary(accData)
pp <- ggplot( accData, aes(nRepFac, correctness, colour=classifier) )
pp <- pp + stat_summary(fun.y = mean, geom = "line", width = 0.2)
pp
pp <- pp + stat_summary(fun.y = mean, geom = "line", aes(group=classifier), width = 0.2)
pp
pp <- pp + facet_wrap(~condition)
pp <- cleanPlot(pp)
print(pp)
pp2 <- pp + facet_grid(subject~condition)
print(pp2)
pp2 <- pp + facet_grid(condition~subject)
print(pp2)
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/")
rm(list = ls())
library(ggplot2)
library(plyr)
library(car)
# library(reshape2)
# library(lme4)
# library(LMERConvenienceFunctions)
# library(languageR)
# library(Hmisc)
source("createDataFrame.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
outputPath <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/draftHybridPaper/pix/"
aveClass <- 0
nRunsForTrain <- 2
FS <- 128
nFoldSvm <- 10
accData <- createDataFrame(aveClass, nRunsForTrain, FS, nFoldSvm)
accData <- accData[accData$subject != "S08",]
accData$subject <- revalue(accData$subject, c("S09"="S08", "S10"="S09"))
accData$subject <- droplevels(accData$subject)
# levels(accData$subject)
accData <- accData[accData$classifier != "pooled",]
accData$classifier <- droplevels(accData$classifier)
accData <- accData[accData$condition != "oddball", ]
accData$condition <- droplevels(accData$condition)
accData$frequency <- droplevels(accData$frequency)
accData$classifier <- revalue( accData$classifier
, c("normal"="specific"
, "pooledAll"="general")
str(accData)
summary(accData)
#################################################################################################################
#                                                                                                               #
#                                         PLOT PER SUBJECT DATA                                                 #
#                                                                                                               #
#################################################################################################################
# varList <- c("subject", "nRepFac", "classifier")
# accData2 <- ddply( accData, varList, summarize
#                    , meanCorr = mean(correctness)
#                    , nRep = unique(nRep)
#                    )
#
# varList <- c("nRepFac", "classifier")
# temp <- ddply( accData, varList, summarize
#                , meanCorr = mean(correctness)
#                , nRep = unique(nRep)
#                )
#
# temp$subject <- "grand mean"
# accData2 <- rbind(accData2, temp)
#
# str(accData2)
# summary(accData2)
#
#
# #################################################################################################################
# #################################################################################################################
#
# png(filename = file.path(outputPath, "P3AccuracyPerClassifierPerSubject.png")
#     , width = 900
#     , height = 600
#     , units = "px"
# )
#
# pp <- ggplot( accData2, aes(nRepFac, meanCorr, colour=classifier) )
# pp <- pp + geom_point(width = 0.2, position = position_dodge(.3))
# pp <- pp + geom_line(aes(group=classifier), width = 0.2, position = position_dodge(.3))
# pp <- pp + facet_wrap( ~subject ) + xlab("number of repetitions") + ylab("accuracy")
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(5/8,1/6))
# print(pp)
#
# dev.off()
#
# # ggsave( filename = "P3Accuracy.png"
# #         , plot = pp
# #         , path = outputPath
# #         , width = 30
# #         , height = 20
# #         , units = "cm"
# #         , dpi =  600
# #         )
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/")
rm(list = ls())
library(ggplot2)
library(plyr)
library(car)
# library(reshape2)
# library(lme4)
# library(LMERConvenienceFunctions)
# library(languageR)
# library(Hmisc)
source("createDataFrame.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
outputPath <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/draftHybridPaper/pix/"
aveClass <- 0
nRunsForTrain <- 2
FS <- 128
nFoldSvm <- 10
accData <- createDataFrame(aveClass, nRunsForTrain, FS, nFoldSvm)
accData <- accData[accData$subject != "S08",]
accData$subject <- revalue(accData$subject, c("S09"="S08", "S10"="S09"))
accData$subject <- droplevels(accData$subject)
# levels(accData$subject)
accData <- accData[accData$classifier != "pooled",]
accData$classifier <- droplevels(accData$classifier)
accData <- accData[accData$condition != "oddball", ]
accData$condition <- droplevels(accData$condition)
accData$frequency <- droplevels(accData$frequency)
accData$classifier <- revalue( accData$classifier
, c("normal"="specific"
, "pooledAll"="general"))
str(accData)
summary(accData)
#################################################################################################################
#                                                                                                               #
#                                         PLOT PER SUBJECT DATA                                                 #
#                                                                                                               #
#################################################################################################################
# varList <- c("subject", "nRepFac", "classifier")
# accData2 <- ddply( accData, varList, summarize
#                    , meanCorr = mean(correctness)
#                    , nRep = unique(nRep)
#                    )
#
# varList <- c("nRepFac", "classifier")
# temp <- ddply( accData, varList, summarize
#                , meanCorr = mean(correctness)
#                , nRep = unique(nRep)
#                )
#
# temp$subject <- "grand mean"
# accData2 <- rbind(accData2, temp)
#
# str(accData2)
# summary(accData2)
#
#
# #################################################################################################################
# #################################################################################################################
#
# png(filename = file.path(outputPath, "P3AccuracyPerClassifierPerSubject.png")
#     , width = 900
#     , height = 600
#     , units = "px"
# )
#
# pp <- ggplot( accData2, aes(nRepFac, meanCorr, colour=classifier) )
# pp <- pp + geom_point(width = 0.2, position = position_dodge(.3))
# pp <- pp + geom_line(aes(group=classifier), width = 0.2, position = position_dodge(.3))
# pp <- pp + facet_wrap( ~subject ) + xlab("number of repetitions") + ylab("accuracy")
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(5/8,1/6))
# print(pp)
#
# dev.off()
#
# # ggsave( filename = "P3Accuracy.png"
# #         , plot = pp
# #         , path = outputPath
# #         , width = 30
# #         , height = 20
# #         , units = "cm"
# #         , dpi =  600
# #         )
png(filename = file.path(outputPath, "P3AccuracyPerClassifierPerFreq.png")
, width = 900
, height = 600
, units = "px"
)
pp <- ggplot( accData, aes(nRepFac, correctness, colour=classifier) )
pp <- pp + stat_summary(fun.y = mean, geom = "line", aes(group=classifier), width = 0.2)
pp <- pp + facet_wrap(~condition)
pp <- cleanPlot(pp)
print(pp)
# pp2 <- pp + facet_grid(condition~subject)
# print(pp2)
dev.off()
source('D:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/draftHybridPaper/matlab/Exp1-AccuracyPlotPerClassifier3.R', echo=TRUE)
library(multcomp)
install.packages("multcomp")
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/05-TargetERP-correlation/")
rm(list = ls())
library(ggplot2)
library(reshape2)
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
#####################################################################################################################
#####################################################################################################################
resDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciResults/watchERP/05-TargetERP-correlation/"
corrFile <- file.path( resDir, "ERPcorrelations.txt")
corrDataset <- read.csv(corrFile, header = TRUE, sep = ",", strip.white = TRUE)
corrDataset <- corrDataset[corrDataset$subject != "S08", ]
corrDataset$subject <- droplevels(corrDataset$subject)
corrDataset$ish1015 <- as.factor(corrDataset$ish10 & corrDataset$ish15)
corrDataset$isodd <- as.factor(corrDataset$isodd)
corrDataset$ish08 <- as.factor(corrDataset$ish08)
corrDataset$ish10 <- as.factor(corrDataset$ish10)
corrDataset$ish12 <- as.factor(corrDataset$ish12)
corrDataset$ish15 <- as.factor(corrDataset$ish15)
#####################################################################################################################
#####################################################################################################################
channels <- c("F3", "Fz", "F4", "C3", "Cz", "C4", "P3", "Pz", "P4", "O1", "Oz", "O2")
temp <- corrDataset[corrDataset$channel %in% channels, ]
temp$channel <- droplevels(temp$channel)
temp$channel <- ordered(temp$channel, levels = channels)
pp2 <- ggplot(temp, aes(channel, correlation, colour=isodd))
pp2 <- pp2 + geom_point(size=3) + labs(colour='oddball condition')
pp2 <- pp2 + facet_wrap(~subject)
pp2 <- cleanPlot(pp2)
print(pp2)
#####################################################################################################################
#####################################################################################################################
summary(corrDataset)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
library(multcomp)
lm1 <- lmer( correlation ~ pair + (1|subject/channel), data = corrDataset)
summary(lm1)
mltComp <- glht(lm1, linfct=mcp(Text="Tukey"))
mltComp <- glht(lm1, linfct=mcp(pair="Tukey"))
summary(lmtComp)
summary(mltComp)

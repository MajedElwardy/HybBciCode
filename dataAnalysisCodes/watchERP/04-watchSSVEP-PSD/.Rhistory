politeness.model.p = pvals.fnc(politeness.model)
politeness.model.p
View(politeness)
mean(politeness$frequency, na.rm=T)
mean(politeness[which(politeness$gender == "F"),]$frequency)
mean(politeness[which(politeness$gender == "M"),]$frequency)
mean(politeness[which(politeness$gender == "M"),]$frequency, na.rm=T)
politeness.model = lmer(frequency ~ attitude*gender + (1|subject) + (1|scenario), data=politeness)
politeness.model.p = pvals.fnc(politeness.model)
politeness.model.p
plot(fitted(politeness.model),residuals(politeness.model))
politeness.null = lmer(frequency ~ 1 + (1|subject) + (1|scenario), data=politeness)
anova(politeness.model, politeness.null)
??read
test <- scan(file="accuracyDataset.txt")
test <- scan(file="d:\KULeuven\PhD\Work\PatientStudy\statisticLME\accuracyDataset.txt")
test <- scan(file="d:/KULeuven/PhD/Work/PatientStudy/statisticLME/accuracyDataset.txt")
test <- read.table("d:/KULeuven/PhD/Work/PatientStudy/statisticLME/accuracyDataset.txt", header = TRUE, row.names = 1)
test <- read.table("d:/KULeuven/PhD/Work/PatientStudy/statisticLME/accuracyDataset.txt", header = TRUE)
View(test)
rm(list=ls());
accDataset <- read.table("d:/KULeuven/PhD/Work/PatientStudy/statisticLME/accuracyDataset.txt", header = TRUE)
boxplot(accuracy ~ system, data=accDataset)
boxplot(accuracy ~ system*timePerSymbol, data=accDataset)
View(accDataset)
View(accDataset)
accDataset.model = lmer(accuracy ~ system + (1|subject) + (1|timePerSymbol), data=accDataset)
accDataset.model.p = pvals.fnc(accDataset.model)
accDataset.model.p
accDataset.model = lmer(accuracy ~ system + (1|subject), data=accDataset)
accDataset.model.p = pvals.fnc(accDataset.model)
accDataset.model.p
accDataset.model = lmer(accuracy ~ system*timePerSymbol + (1|subject), data=accDataset)
accDataset.model.p = pvals.fnc(accDataset.model)
accDataset.model.p
library(lme4);library(languageR);
rm(list=ls());
accDataset <- read.table("d:/KULeuven/PhD/Work/PatientStudy/statisticLME/accuracyDataset.txt", header = TRUE)
boxplot(accuracy ~ system, data=accDataset)
boxplot(accuracy ~ system*timePerSymbol, data=accDataset)
accDataset.model = lmer(accuracy ~ system + (1|subject), data=accDataset)
accDataset.model.p = pvals.fnc(accDataset.model)
accDataset.model.p
accDataset.model = lmer(accuracy ~ system + (1|subject) + (1|timePerSymbol), data=accDataset)
accDataset.model.p = pvals.fnc(accDataset.model)
accDataset.model.p
accDataset.model = lmer(accuracy ~ system*timePerSymbol + (1|subject), data=accDataset)
accDataset.model.p = pvals.fnc(accDataset.model)
accDataset.model.p
View(accDataset)
View(accDataset)
library(lme4)
library(lme4)
str(Dyestuff)
head(Dyestuff)
summary(Dyestuff)
print(dotplot(reorder(Batch, Yield) ~ Yield, Dyestuff,
ylab = "Batch", jitter.y = TRUE, pch = 21,
xlab = "Yield of dyestuff (grams of standard color)",
type = c("p", "a")))
library(lme4);library(languageR);
rm(list=ls());
politeness <- read.csv(file="d:/KULeuven/PhD/Courses-Tutorial/R-statistics/linearMixedModelWithR/politeness_data.csv");
politeness <- read.csv(file="d:\KULeuven\PhD\Statistics\LMEStuffs\Winter (2011) A very basic tutorial for performing linear mixed effects analyses\politeness_data.csv");
politeness <- read.csv(file="d:/KULeuven/PhD/Statistics/LMEStuffs/Winter (2011) A very basic tutorial for performing linear mixed effects analyses/politeness_data.csv");
head()
head(politeness)
summary(politeness)
str(politeness)
colnamesstr(politeness)
colnames(politeness)
which(is.na(politeness)==T)
View(politeness)
56*4
56*4+39
clc
source('D:/KULeuven/PhD/Statistics/LMEStuffs/Winter (2011) A very basic tutorial for performing linear mixed effects analyses/RScriptLMM.R')
source('D:/KULeuven/PhD/Statistics/LMEStuffs/Winter (2011) A very basic tutorial for performing linear mixed effects analyses/RScriptLMM.R')
fix(politeness.model)
summary(politeness)
boxplot(frequency ~ attitude, data=politeness)
rm(list=ls());
politeness <- read.csv(file="d:/KULeuven/PhD/Statistics/LMEStuffs/Winter (2011) A very basic tutorial for performing linear mixed effects analyses/politeness_data.csv");
boxplot(frequency ~ attitude, data=politeness)
median(politeness[which(politeness$attitude=="pol"),]$frequency, na.rm=T)
median(politeness[which(politeness$attitude=="pol"),]$frequency, na.rm=T)
median(politeness[which(politeness$attitude=="inf"),]$frequency)
boxplot(frequency ~ attitude*gender, data=politeness)
politeness.model = lmer(frequency ~ attitude + (1|subject) + (1|scenario), data=politeness)
politeness.model
14.544^2
politeness.model.p = pvals.fnc(politeness.model)
politeness.model.p
mean(politeness$frequency, na.rm=T)
mean(politeness[which(politeness$gender == "F"),]$frequency)
mean(politeness[which(politeness$gender == "M"),]$frequency)
mean(politeness[which(politeness$gender == "M"),]$frequency, na.rm=T)
politeness.model = lmer(frequency ~ attitude*gender + (1|subject) + (1|scenario), data=politeness)
politeness.model
politeness.model.p = pvals.fnc(politeness.model)
politeness.model.p
plot(fitted(politeness.model),residuals(politeness.model))
example3 <- read.table("http://www.unt.edu/rss/class/Jon/R_SC/Module3/ExampleData3.txt", header=TRUE, sep="", na.strings="NA", dec=".", strip.white=TRUE)
summary(example3)
head(example3, 15)
attributes(example3)
library(lme4)
?lme4
?lmer
(1997). The data frame contains measurements of heart and body weight
install.packages("tools")
install.packages("stringr")
install.packages("tools")
install.packages("patchDVI", repos="http://R-Forge.R-project.org")
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
str(accData1)
summary(accData1)
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nRep, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nRep, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nAverages, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nAverages, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-ter-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nAverages, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
iS<-1
nRunsForTrain <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_%dRunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", nRunsForTrain, iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
str(accData1)
summary(accData1)
library(nlme)
library(lme4)
library(nlme)
packageDescription("(nlme")["Version"]
packageDescription("nlme")["Version"]
inst <- packageStatus()$inst
inst
summary(inst)
inst[inst$Status != "ok",]
inst[inst$Status != "ok", c("Package", "Version", "Status")]
update.packages()
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/04-watchSSVEP-PSD/")
rm(list = ls())
library(ggplot2)
library(reshape2)
library(grid)
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("createSnrDatasetFnc.R")
# subsetChLabel <- c("ch-O", "ch-PO-O", "ch-P-PO-O", "ch-CP-P-PO-O", "ch-C-CP-P-PO-O", "ch-all")
# harmonicsLabel <- c("fund","fund-ha1")
subsetChLabel <- c("ch-P-PO-O")
harmonicsLabel <- c("fund-ha1")
snrData <- createSnrDatasetFnc(subsetChLabel, harmonicsLabel)
snrData <- snrData[snrData$watchedFrequency == snrData$targetFrequency,]
str(snrData)
#############################################################################################################
#############################################################################################################
pp <- ggplot( snrData, aes(time, snr, colour=oddball ) )
pp <- pp + stat_summary(fun.data = mean_cl_normal, geom="pointrange", position = position_dodge(0.2))
pp <- pp + stat_summary(fun.y = mean, geom="line", aes(group=oddball), position = position_dodge(0.2))
pp <- pp + facet_wrap( ~targetFrequency )
pp <- cleanPlot(pp)
print(pp)
pp2 <- pp + facet_wrap( ~subject )
print(pp2)
pp3 <- pp + facet_grid( targetFrequency~subject )
print(pp3)
#############################################################################################################
#############################################################################################################
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
fm1 <- lmer( snr ~ (time+I(time^2))*frequency*oddball
+ ((time+I(time^2))|subject/trialInSub)
, snrData
, REML = FALSE
)
fm2 <- lmer( snr ~ (time+I(time^2))*frequency
+ ((time+I(time^2))|subject/trialInSub)
, snrData
, REML = FALSE
)
fm3 <- lmer( snr ~ (time+I(time^2))*oddball
+ ((time+I(time^2))|subject/trialInSub)
, snrData
, REML = FALSE
)
fm4 <- lmer( snr ~ (time+I(time^2))
+ ((time+I(time^2))|subject/trialInSub)
, snrData
, REML = FALSE
)
anova(fm1, fm2)
anova(fm1, fm3)
anova(fm2, fm4)
anova(fm3, fm4)
summary(snrData)
str(snrData)
snrData$trialInSub <- snrData$run : snrData$roundNb
fm1 <- lmer( snr ~ (time+I(time^2))*frequency*oddball
+ ((time+I(time^2))|subject/trialInSub)
, snrData
, REML = FALSE
)
fm1 <- lmer( snr ~ (time+I(time^2))*targetFrequency*oddball
+ ((time+I(time^2))|subject/trialInSub)
, snrData
, REML = FALSE
)
fm <- fm1
snrData$fitted  <- fitted(fm)
snrData$res     <- residuals(fm, type="normalized")
pp4 <- ggplot( snrData, aes(time, snr, colour=oddball) )
pp4 <- pp4 + geom_point(size=1) + geom_line( aes(time, snr, group=trialInSubAndFreq) , linetype=2, size=0.3)
pp4 <- pp4 + geom_point() + geom_line( aes(time, fitted, group=trialInSubAndFreq) )
pp4 <- pp4 + facet_grid( subject~targetFrequency, scales="free" )
# pp4 <- pp4 + facet_wrap( ~subject )
pp4 <- cleanPlot(pp4)
pp4
snrData$trialInSub <- snrData$targetFrequency : snrData$run : snrData$roundNb
snrData$trialInSubAndFreq <- snrData$run : snrData$roundNb
fm1 <- lmer( snr ~ (time+I(time^2))*targetFrequency*oddball
+ ((time+I(time^2))|subject/trialInSub)
, snrData
, REML = FALSE
)
summary(srnData)
summary(srnDataset)
summary(snrData)
str(snrData)
13*12*8*8
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/04-watchSSVEP-PSD/")
rm(list = ls())
library(ggplot2)
library(reshape2)
library(grid)
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("createSnrDatasetFnc.R")
# subsetChLabel <- c("ch-O", "ch-PO-O", "ch-P-PO-O", "ch-CP-P-PO-O", "ch-C-CP-P-PO-O", "ch-all")
# harmonicsLabel <- c("fund","fund-ha1")
subsetChLabel <- c("ch-P-PO-O")
harmonicsLabel <- c("fund-ha1")
snrData <- createSnrDatasetFnc(subsetChLabel, harmonicsLabel)
snrData <- snrData[snrData$watchedFrequency == snrData$targetFrequency,]
snrData$trialInSub <- snrData$run : snrData$roundNb
str(snrData)
#############################################################################################################
#############################################################################################################
pp <- ggplot( snrData, aes(time, snr, colour=oddball ) )
pp <- pp + stat_summary(fun.data = mean_cl_normal, geom="pointrange", position = position_dodge(0.2))
pp <- pp + stat_summary(fun.y = mean, geom="line", aes(group=oddball), position = position_dodge(0.2))
pp <- pp + facet_wrap( ~targetFrequency )
pp <- cleanPlot(pp)
print(pp)
pp2 <- pp + facet_wrap( ~subject )
print(pp2)
pp3 <- pp + facet_grid( targetFrequency~subject )
print(pp3)
#############################################################################################################
#############################################################################################################
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
fm1 <- lmer( snr ~ (time+I(time^2))*targetFrequency*oddball
+ ((time+I(time^2))|subject/trialInSub)
, snrData
, REML = FALSE
)
fm2 <- lmer( snr ~ (time+I(time^2))*targetFrequency
summary(fm1)
fm <- fm1
snrData$fitted  <- fitted(fm)
snrData$res     <- residuals(fm, type="normalized")
pp4 <- ggplot( snrData, aes(time, snr, colour=oddball) )
pp4 <- pp4 + geom_point(size=1) + geom_line( aes(time, snr, group=trialInSub) , linetype=2, size=0.3)
pp4 <- pp4 + geom_point() + geom_line( aes(time, fitted, group=trialInSub) )
pp4 <- pp4 + facet_grid( subject~targetFrequency, scales="free" )
# pp4 <- pp4 + facet_wrap( ~subject )
pp4 <- cleanPlot(pp4)
pp4
plot( fitted(fm), residuals(fm) )
abline(h=0)
pp6 <- ggplot(snrData, aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
pp7 <- pp6 + facet_wrap(~as.factor(time), scales="free")
pp7
snrData$timeFac <- as.factor(snrData$time)
pp7 <- pp6 + facet_wrap(~timeFac, scales="free")
pp7
str(snrData)
pp6 <- ggplot(snrData, aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
summary(snrData)
snrData[snrData$timeFac=="1",]
pp6 <- ggplot(snrData[snrData$time==1], aes(fitted, res))
pp6 <- ggplot(snrData[snrData$time==1,], aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
pp6 <- ggplot(snrData[snrData$time==2,], aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
pp6 <- ggplot(snrData[snrData$time==3,], aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
pp6 <- ggplot(snrData[snrData$time==13,], aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
pp6 <- ggplot(snrData[snrData$time==12,], aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
t<-11
pp6 <- ggplot(snrData[snrData$time==t,], aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
t<-10
pp6 <- ggplot(snrData[snrData$time==t,], aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
t<-9
pp6 <- ggplot(snrData[snrData$time==t,], aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
t<-8
pp6 <- ggplot(snrData[snrData$time==t,], aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
t<-7
pp6 <- ggplot(snrData[snrData$time==t,], aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
t<-6
pp6 <- ggplot(snrData[snrData$time==t,], aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
t<-5
pp6 <- ggplot(snrData[snrData$time==t,], aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
t<-4
pp6 <- ggplot(snrData[snrData$time==t,], aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
pp6 <- ggplot(snrData, aes(fitted, res))
pp6 <- pp6 + geom_point()
pp6 <- cleanPlot(pp6)
pp6
snrData$timeFac <- as.factor(snrData$time)
pp7 <- pp6 + facet_wrap(~timeFac)
pp7
pp7 <- pp6 + facet_wrap(~timeFac, scales="free")
pp7
mcp.fnc(fm, trim = 2.5, col = "red")
tete <- pacf( resid( fm ) )
pp5 <- ggplot( snrData, aes(time, res) )
pp5 <- pp5 + geom_point()
pp5 <- cleanPlot(pp5)
pp5
fm2 <- lmer( snr ~ (time+I(time^2))*targetFrequency
+ ((time+I(time^2))|subject/trialInSub)
, snrData
, REML = FALSE
)
anova(fm1, fm2)
fm1b <- lmer( snr ~ (time+I(time^2))+targetFrequency+oddball
+ ((time+I(time^2))|subject/trialInSub)
, snrData
, REML = FALSE
)
anova(fm1, fm1b)
fm1b <- lmer( snr ~ ((time+I(time^2))*targetFrequency) + oddball
+ ((time+I(time^2))|subject/trialInSub)
, snrData
, REML = FALSE
)
anova(fm1, fm1b)
fm1b <- lmer( snr ~ (time+I(time^2)) + targetFrequency + oddball
+ (time+I(time^2)) : targetFrequency + (time+I(time^2)) : oddball
+ ((time+I(time^2))|subject/trialInSub)
, snrData
, REML = FALSE
)
anova(fm1, fm1b)
summary(fm1b)
source('D:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/04-watchSSVEP-PSD/psdPlots.R', echo=TRUE)

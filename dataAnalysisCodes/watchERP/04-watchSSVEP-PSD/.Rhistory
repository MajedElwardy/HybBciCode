filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nAverages, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
iS<-1
nRunsForTrain <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_%dRunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", nRunsForTrain, iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
str(accData1)
summary(accData1)
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/04-watchSSVEP-PSD/")
rm(list = ls())
library(ggplot2)
library(reshape2)
library(grid)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
filename <- "psdDataset_SelChan_1Ha"
####################################################################################################################
####################################################################################################################
# linearReg <- function(filename)
# {
fileDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watch-ERP/04-watchSSVEP-PSD"
fullfilename <- file.path( fileDir, paste0(filename, ".csv") )
#   resDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciResults/watchERP/04-watchSSVEP-PSD"
#   resDir <- file.path(resDir, filename)
#   dir.create(resDir, showWarnings=FALSE)
psdData <- read.csv(fullfilename, header = TRUE)
psdData$frequency       <- as.factor(psdData$frequency)
psdData$oddball         <- as.factor(psdData$oddball)
psdData$fileNb          <- as.factor(psdData$fileNb)
psdData$trial           <- as.factor(psdData$trial)
psdData$stimDurationFac <- as.factor(psdData$stimDuration)
psdData$psd             <- sqrt(psdData$psd)
# add coding variable for nRep nested within subject
psdData$stimDurationWithinSub <- psdData$stimDuration
allSubs   <- levels(psdData$subject)
nSubs   <- length(allSubs)
for (iS in 1:nSubs){
psdData[psdData$subject==allSubs[iS], ]$stimDurationWithinSub <- iS*1000 + psdData[psdData$subject==allSubs[iS], ]$stimDurationWithinSub
}
psdData$stimDurationWithinSub <- as.factor(psdData$stimDurationWithinSub)
str(psdData)
summary(psdData)
4*2*14*12
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/04-watchSSVEP-PSD/")
rm(list = ls())
library(ggplot2)
library(reshape2)
library(grid)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
filename <- "psdDataset_SelChan_1Ha"
####################################################################################################################
####################################################################################################################
# linearReg <- function(filename)
# {
fileDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watch-ERP/04-watchSSVEP-PSD"
fullfilename <- file.path( fileDir, paste0(filename, ".csv") )
#   resDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciResults/watchERP/04-watchSSVEP-PSD"
#   resDir <- file.path(resDir, filename)
#   dir.create(resDir, showWarnings=FALSE)
psdData <- read.csv(fullfilename, header = TRUE)
psdData$frequency       <- as.factor(psdData$frequency)
psdData$oddball         <- as.factor(psdData$oddball)
psdData$fileNb          <- as.factor(psdData$fileNb)
psdData$trial           <- as.factor(psdData$trial)
psdData$stimDurationFac <- as.factor(psdData$stimDuration)
psdData$psd             <- sqrt(psdData$psd)
# add coding variable for nRep nested within subject
psdData$stimDurationWithinSub <- psdData$stimDuration
allSubs   <- levels(psdData$subject)
nSubs   <- length(allSubs)
for (iS in 1:nSubs){
psdData[psdData$subject==allSubs[iS], ]$stimDurationWithinSub <- iS*1000 + psdData[psdData$subject==allSubs[iS], ]$stimDurationWithinSub
}
psdData$stimDurationWithinSub <- as.factor(psdData$stimDurationWithinSub)
str(psdData)
summary(psdData)
lmH <- NULL
#################################################################################################################
#################################################################################################################
f857Vs10_12_15      = c(-3, 1, 1, 1)     # hybrid-8-57Hz vs. hybrid-10-12-15-Hz
f10Vs12_15          = c(0, -2, 1, 1)     # hybrid-10Hz vs. hybrid-12-15-Hz
f12Vs15             = c(0, 0, -1, 1)     # hybrid-12Hz vs. hybrid-15-Hz
contrasts(psdData$frequency) <- cbind(
f857Vs10_12_15
, f10Vs12_15
, f12Vs15
)
Rep1VsRep2    = c(-1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Rep2VsRep3    = c(0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Rep3VsRep4    = c(0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Rep4VsRep5    = c(0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Rep5VsRep6    = c(0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0)
Rep6VsRep7    = c(0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0)
Rep7VsRep8    = c(0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0)
Rep8VsRep9    = c(0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0)
Rep9VsRep10   = c(0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0)
Rep10VsRep11  = c(0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0)
Rep11VsRep12  = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0)
Rep12VsRep13  = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0)
Rep13VsRep14  = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, 1)
contrasts(psdData$stimDurationFac) <- cbind(
Rep1VsRep2
, Rep2VsRep3
, Rep3VsRep4
, Rep4VsRep5
, Rep5VsRep6
, Rep6VsRep7
, Rep7VsRep8
, Rep8VsRep9
, Rep9VsRep10
, Rep10VsRep11
, Rep11VsRep12
, Rep12VsRep13
, Rep13VsRep14
)
####################################################################################################################
lmH1 <- lmer( psd ~ stimDuration * oddball * frequency + (stimDuration | subject) , data = psdData )
lmH3 <- lmer( psd ~ stimDuration * oddball * frequency + (stimDuration | subject/frequency/oddball/trial), data = psdData )
anova(lmH1, lmH3)
lmH5 <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject/trial), data = psdData )
anova(lmH5, lmH1)
anova(lmH5, lmH3)
lmH5 <- lmer( psd ~ stimDuration * oddball * frequency + (stimDuration | subject/trial), data = psdData )
anova(lmH5, lmH1)
anova(lmH5, lmH3)
lmH6 <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject/trial), data = psdData )
anova(lmH5, lmH6)
1:10
iS = 1
toto <- psdData[psdData$subject==allSubs[iS], ]
length(toto)
summary(toto)
nrow(toto)
toto <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject) + (stimDuration | trialPerSub), data = psdData )
tete <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject) + (stimDuration | trialWithinSub), data = psdData )
tata <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject/trialPerSub), data = psdData )
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/04-watchSSVEP-PSD/")
rm(list = ls())
library(ggplot2)
library(reshape2)
library(grid)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
filename <- "psdDataset_SelChan_1Ha"
####################################################################################################################
####################################################################################################################
# linearReg <- function(filename)
# {
fileDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watch-ERP/04-watchSSVEP-PSD"
fullfilename <- file.path( fileDir, paste0(filename, ".csv") )
#   resDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciResults/watchERP/04-watchSSVEP-PSD"
#   resDir <- file.path(resDir, filename)
#   dir.create(resDir, showWarnings=FALSE)
psdData <- read.csv(fullfilename, header = TRUE)
psdData$frequency       <- as.factor(psdData$frequency)
psdData$oddball         <- as.factor(psdData$oddball)
psdData$fileNb          <- as.factor(psdData$fileNb)
psdData$trial           <- as.factor(psdData$trial)
psdData$stimDurationFac <- as.factor(psdData$stimDuration)
psdData$psd             <- sqrt(psdData$psd)
# add coding variable for nRep nested within subject
psdData$stimDurationWithinSub <- psdData$stimDuration
allSubs   <- levels(psdData$subject)
nSubs   <- length(allSubs)
for (iS in 1:nSubs){
psdData[psdData$subject==allSubs[iS], ]$stimDurationWithinSub <- iS*1000 + psdData[psdData$subject==allSubs[iS], ]$stimDuration
}
psdData$stimDurationWithinSub <- as.factor(psdData$stimDurationWithinSub)
psdData$trialWithinSub <- NULL
psdData$trialPerSub <- NULL
allSubs   <- levels(psdData$subject)
nSubs   <- length(allSubs)
for (iS in 1:nSubs){
psdData[psdData$subject==allSubs[iS], ]$trialWithinSub <- iS*1000 + 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
psdData[psdData$subject==allSubs[iS], ]$trialPerSub <- 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
}
psdData$trialWithinSub <- as.factor(psdData$trialWithinSub)
psdData$trialPerSub <- as.factor(psdData$trialPerSub)
str(psdData)
summary(psdData)
lmH <- NULL
#################################################################################################################
#################################################################################################################
f857Vs10_12_15      = c(-3, 1, 1, 1)     # hybrid-8-57Hz vs. hybrid-10-12-15-Hz
f10Vs12_15          = c(0, -2, 1, 1)     # hybrid-10Hz vs. hybrid-12-15-Hz
f12Vs15             = c(0, 0, -1, 1)     # hybrid-12Hz vs. hybrid-15-Hz
contrasts(psdData$frequency) <- cbind(
f857Vs10_12_15
, f10Vs12_15
, f12Vs15
)
Rep1VsRep2    = c(-1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Rep2VsRep3    = c(0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Rep3VsRep4    = c(0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Rep4VsRep5    = c(0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Rep5VsRep6    = c(0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0)
Rep6VsRep7    = c(0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0)
Rep7VsRep8    = c(0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0)
Rep8VsRep9    = c(0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0)
Rep9VsRep10   = c(0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0)
Rep10VsRep11  = c(0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0)
Rep11VsRep12  = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0)
Rep12VsRep13  = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0)
Rep13VsRep14  = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, 1)
contrasts(psdData$stimDurationFac) <- cbind(
Rep1VsRep2
, Rep2VsRep3
, Rep3VsRep4
, Rep4VsRep5
, Rep5VsRep6
, Rep6VsRep7
, Rep7VsRep8
, Rep8VsRep9
, Rep9VsRep10
, Rep10VsRep11
, Rep11VsRep12
, Rep12VsRep13
, Rep13VsRep14
)
toto <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject) + (stimDuration | trialPerSub), data = psdData )
tete <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject) + (stimDuration | trialWithinSub), data = psdData )
tata <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject/trialPerSub), data = psdData )
summary(psdData)
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/04-watchSSVEP-PSD/")
rm(list = ls())
library(ggplot2)
library(reshape2)
library(grid)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
filename <- "psdDataset_SelChan_1Ha"
####################################################################################################################
####################################################################################################################
# linearReg <- function(filename)
# {
fileDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watch-ERP/04-watchSSVEP-PSD"
fullfilename <- file.path( fileDir, paste0(filename, ".csv") )
#   resDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciResults/watchERP/04-watchSSVEP-PSD"
#   resDir <- file.path(resDir, filename)
#   dir.create(resDir, showWarnings=FALSE)
psdData <- read.csv(fullfilename, header = TRUE)
psdData$frequency       <- as.factor(psdData$frequency)
psdData$oddball         <- as.factor(psdData$oddball)
psdData$fileNb          <- as.factor(psdData$fileNb)
psdData$trial           <- as.factor(psdData$trial)
psdData$stimDurationFac <- as.factor(psdData$stimDuration)
psdData$psd             <- sqrt(psdData$psd)
# add coding variable for nRep nested within subject
psdData$stimDurationWithinSub <- psdData$stimDuration
allSubs   <- levels(psdData$subject)
nSubs   <- length(allSubs)
for (iS in 1:nSubs){
psdData[psdData$subject==allSubs[iS], ]$stimDurationWithinSub <- iS*1000 + psdData[psdData$subject==allSubs[iS], ]$stimDuration
}
psdData$stimDurationWithinSub <- as.factor(psdData$stimDurationWithinSub)
psdData$trialWithinSub <- NULL
psdData$trialPerSub <- NULL
allSubs   <- levels(psdData$subject)
nSubs   <- length(allSubs)
for (iS in 1:nSubs){
psdData[psdData$subject==allSubs[iS], ]$trialWithinSub <- iS*1000 + 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
psdData[psdData$subject==allSubs[iS], ]$trialPerSub <- 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
}
psdData$trialWithinSub <- as.factor(psdData$trialWithinSub)
psdData$trialPerSub <- as.factor(psdData$trialPerSub)
str(psdData)
summary(psdData)
lmH <- NULL
iS
psdData[psdData$subject==allSubs[iS], ]
nrow( psdData[psdData$subject==allSubs[iS], ] )
psdData$trialWithinSub <- NULL
psdData$trialPerSub <- NULL
allSubs   <- levels(psdData$subject)
nSubs   <- length(allSubs)
for (iS in 1:nSubs){
psdData[psdData$subject==allSubs[iS], ]$trialWithinSub <- iS*1000 + 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
psdData[psdData$subject==allSubs[iS], ]$trialPerSub <- 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
}
toto <- iS*1000 + 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
tete <- psdData[psdData$subject==allSubs[iS], ]$trialWithinSub
length(toto)
length(tete)
summary(psdData)
psdData$trialWithinSub <- trial
psdData$trialPerSub <- trial
allSubs   <- levels(psdData$subject)
nSubs   <- length(allSubs)
for (iS in 1:nSubs){
psdData[psdData$subject==allSubs[iS], ]$trialWithinSub <- iS*1000 + 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
psdData[psdData$subject==allSubs[iS], ]$trialPerSub <- 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
}
psdData$trialWithinSub <- as.factor(psdData$trialWithinSub)
psdData$trialPerSub <- as.factor(psdData$trialPerSub)
psdData$trialWithinSub <- psdData$trial
psdData$trialPerSub <- psdData$trial
allSubs   <- levels(psdData$subject)
nSubs   <- length(allSubs)
for (iS in 1:nSubs){
psdData[psdData$subject==allSubs[iS], ]$trialWithinSub <- iS*1000 + 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
psdData[psdData$subject==allSubs[iS], ]$trialPerSub <- 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
}
psdData$trialWithinSub <- numeric( nrow(psdData) )
psdData$trialPerSub <- numeric( nrow(psdData) )
allSubs   <- levels(psdData$subject)
nSubs   <- length(allSubs)
for (iS in 1:nSubs){
psdData[psdData$subject==allSubs[iS], ]$trialWithinSub <- iS*1000 + 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
psdData[psdData$subject==allSubs[iS], ]$trialPerSub <- 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
}
psdData$trialWithinSub <- as.factor(psdData$trialWithinSub)
psdData$trialPerSub <- as.factor(psdData$trialPerSub)
str(psdData)
summary(psdData)
toto <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject) + (stimDuration | trialPerSub), data = psdData )
tete <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject) + (stimDuration | trialWithinSub), data = psdData )
tata <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject/trialPerSub), data = psdData )
str(psdData)
toto <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject) + (stimDuration | trialPerSub), data = psdData )
tete <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject) + (stimDuration | trialWithinSub), data = psdData )
toto
tete
anova(toto, tete)
tata <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject/trialPerSub), data = psdData )
tata <- lmer( psd ~ stimDuration * frequency + (1 | subject/trialPerSub), data = psdData )
length(unique(psdData$trialWithinSub)))
length(unique(psdData$trialWithinSub))
length(unique(psdData$trialPerSub))
length(unique(psdData$subject))
psdData$trialWithinSub <- numeric( nrow(psdData) )
psdData$trialPerSub <- numeric( nrow(psdData) )
allSubs   <- levels(psdData$subject)
nSubs   <- length(allSubs)
for (iS in 1:nSubs){
psdData[psdData$subject==allSubs[iS], ]$trialWithinSub <- iS*10000 + 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
psdData[psdData$subject==allSubs[iS], ]$trialPerSub <- 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
}
psdData$trialWithinSub <- as.factor(psdData$trialWithinSub)
psdData$trialPerSub <- as.factor(psdData$trialPerSub)
str(psdData)
summary(psdData)
toto <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject) + (stimDuration | trialPerSub), data = psdData )
tete <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject) + (stimDuration | trialWithinSub), data = psdData )
tata <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject/trialPerSub), data = psdData )
testdata <- psdData[psdData$stimDuration==5,]
testdata$stimDuration = droplevels(testdata$stimDuration)
summary(testdata)
mm <- lmer(psd ~ frequency * oddball (1|subject), data=testdata)
mm <- lmer(psd ~ frequency * oddball + (1|subject), data=testdata)
mm2 <- lmer(psd ~ oddball + (1|frequency) + (1|subject), data=testdata)
anova(mm, mm2)
mm2 <- lmer(psd ~ frequency + (1|oddball) + (1|subject), data=testdata)
anova(mm, mm2)
lmH1 <- lmer( psd ~ stimDuration * oddball * frequency + (stimDuration | subject) , data = psdData )
lmH1a <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject) , data = psdData )
anova(lmH1, lmH1a)
pp <- pvals.fnc(lmH1)
lmH1 <- lmer( psd ~ stimDuration * oddball * frequency + (stimDuration | subject) , data = psdData )
lmH1a <- lmer( psd ~ stimDuration * oddball * frequency + (1 | subject) + (0 + stimDuration | subject) , data = psdData )
anova(lmH1, lmH1a)
pp <- pvals.fnc(lmH1a)
pp
lmH2a <- lmer( psd ~ stimDuration * frequency + (1 | subject) + (0 + stimDuration | subject) , data = psdData )
anova(lmH1a, lmH2a)
lmH1a <- lmer( psd ~ stimDuration * frequency + oddball + (1 | subject) + (0 + stimDuration | subject) , data = psdData )
lmH2a <- lmer( psd ~ stimDuration * frequency + (1 | subject) + (0 + stimDuration | subject) , data = psdData )
anova(lmH1a, lmH2a)
lmH1a <- lmer( psd ~ stimDuration * oddball * frequency + (stimDuration | subject) , data = psdData )
lmH2a <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject) , data = psdData )
anova(lmH1a, lmH2a)
lmH1a <- lmer( psd ~ stimDuration * oddball * frequency + (1 | subject) , data = psdData )
lmH2a <- lmer( psd ~ stimDuration * frequency + (1 | subject) , data = psdData )
anova(lmH1a, lmH2a)
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-ter-p3Classification/")
source('D:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/04-watchSSVEP-PSD/psdPlots.R', echo=TRUE)
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/04-watchSSVEP-PSD/")
rm(list = ls())
library(ggplot2)
library(reshape2)
library(grid)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
filename <- "psdDataset_SelChan_1Ha"
####################################################################################################################
####################################################################################################################
# linearReg <- function(filename)
# {
fileDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watch-ERP/04-watchSSVEP-PSD"
fullfilename <- file.path( fileDir, paste0(filename, ".csv") )
#   resDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciResults/watchERP/04-watchSSVEP-PSD"
#   resDir <- file.path(resDir, filename)
#   dir.create(resDir, showWarnings=FALSE)
psdData <- read.csv(fullfilename, header = TRUE)
psdData$frequency       <- as.factor(psdData$frequency)
psdData$oddball         <- as.factor(psdData$oddball)
psdData$fileNb          <- as.factor(psdData$fileNb)
psdData$trial           <- as.factor(psdData$trial)
psdData$stimDurationFac <- as.factor(psdData$stimDuration)
psdData$psd             <- sqrt(psdData$psd)
# add coding variable for nRep nested within subject
psdData$stimDurationWithinSub <- psdData$stimDuration
allSubs   <- levels(psdData$subject)
nSubs   <- length(allSubs)
for (iS in 1:nSubs){
psdData[psdData$subject==allSubs[iS], ]$stimDurationWithinSub <- iS*1000 + psdData[psdData$subject==allSubs[iS], ]$stimDuration
}
psdData$stimDurationWithinSub <- as.factor(psdData$stimDurationWithinSub)
psdData$trialWithinSub <- numeric( nrow(psdData) )
psdData$trialPerSub <- numeric( nrow(psdData) )
allSubs   <- levels(psdData$subject)
nSubs   <- length(allSubs)
for (iS in 1:nSubs){
psdData[psdData$subject==allSubs[iS], ]$trialWithinSub <- iS*10000 + 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
psdData[psdData$subject==allSubs[iS], ]$trialPerSub <- 1:nrow( psdData[psdData$subject==allSubs[iS], ] )
}
psdData$trialWithinSub <- as.factor(psdData$trialWithinSub)
psdData$trialPerSub <- as.factor(psdData$trialPerSub)
str(psdData)
summary(psdData)
lmH <- NULL
#################################################################################################################
#################################################################################################################
f857Vs10_12_15      = c(-3, 1, 1, 1)     # hybrid-8-57Hz vs. hybrid-10-12-15-Hz
f10Vs12_15          = c(0, -2, 1, 1)     # hybrid-10Hz vs. hybrid-12-15-Hz
f12Vs15             = c(0, 0, -1, 1)     # hybrid-12Hz vs. hybrid-15-Hz
contrasts(psdData$frequency) <- cbind(
f857Vs10_12_15
, f10Vs12_15
, f12Vs15
)
Rep1VsRep2    = c(-1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Rep2VsRep3    = c(0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Rep3VsRep4    = c(0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Rep4VsRep5    = c(0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Rep5VsRep6    = c(0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0)
Rep6VsRep7    = c(0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0)
Rep7VsRep8    = c(0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0)
Rep8VsRep9    = c(0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0)
Rep9VsRep10   = c(0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0)
Rep10VsRep11  = c(0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0)
Rep11VsRep12  = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0)
Rep12VsRep13  = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0)
Rep13VsRep14  = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, 1)
contrasts(psdData$stimDurationFac) <- cbind(
Rep1VsRep2
, Rep2VsRep3
, Rep3VsRep4
, Rep4VsRep5
, Rep5VsRep6
, Rep6VsRep7
, Rep7VsRep8
, Rep8VsRep9
, Rep9VsRep10
, Rep10VsRep11
, Rep11VsRep12
, Rep12VsRep13
, Rep13VsRep14
)
lmH1 <- lmer( psd ~ stimDuration * oddball * frequency + (stimDuration | subject) , data = psdData )
lmH4 <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject) , data = psdData )
anova(lmH1, lmH4)
lmH1a <- lmer( psd ~ stimDuration * oddball * frequency + (1 | subject) + (0 + stimDuration | subject) , data = psdData )
lmH4a <- lmer( psd ~ stimDuration * frequency  + (1 | subject) + (0 + stimDuration | subject) , data = psdData )
anova(lmH1a, lmH4a)
pvals.fnc(lmH1a)
pvals.fnc(lmH1)
lmH2a <- lmer( psd ~ stimDuration + oddball + frequency
+ stimDuration:oddball + stimDuration:frequency + oddball:frequency
+ (1 | subject) + (0 + stimDuration | subject) , data = psdData )
anova(lmH1a, lmH2a)
pvals.fnc(lmH2a)
lmH3a <- lmer( psd ~ stimDuration + oddball + frequency
+ stimDuration:frequency + oddball:frequency
+ (1 | subject) + (0 + stimDuration | subject) , data = psdData )
anova(lmH3a, lmH2a)
pvals.fnc(lmH3a)
lmH4a <- lmer( psd ~ stimDuration + oddball + frequency
+ stimDuration:frequency
+ (1 | subject) + (0 + stimDuration | subject) , data = psdData )
anova(lmH3a, lmH4a)
str(psdData)
lm1 <- lmer( psd ~ stimDuration * oddball * frequency + (stimDuration | subject/frequency/oddball/trial) , data = psdData )
lm2 <- lmer( psd ~ stimDuration * frequency + (stimDuration | subject/frequency/oddball/trial) , data = psdData )
anova(lm1, lm2)

print(pp, vp = viewport(layout.pos.row = 1, layout.pos.col = 2) )
print(pp, vp = viewport(layout.pos.row = 2, layout.pos.col = 1) )
print(pp, vp = viewport(layout.pos.row = 2, layout.pos.col = 2) )
print(pp, vp = viewport(layout.pos.row = 1, layout.pos.col = 1) )
pp
dev.off
dev.off()
ii<-&
ii<-1
jj<-1
colFactor     = factorList[ii]
subplotFactor = factorList[-ii]
subplotLevels = levels( dataframe[[subplotFactor]] )
nSubplots     = length( subplotLevels )
subDataframe <- dataframe[dataframe[[subplotFactor]]==subplotLevels[jj], ]
#---------------------------------------------------------------------------------
# generate the interaction plots
pp <- ggplot( subDataframe, aes_string( x = xFactor, y = outcome, colour = colFactor ) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , width = 0.2 , position = position_dodge(.5) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line" , aes_string(group= colFactor[jj]) , width = 0.2 , position = position_dodge(.5) )
pp <- pp + labs(x = xFactor, y = outcome, colour = colFactor[jj]) #+ theme(axis.text.x=element_text(angle=90, hjust=0))
#---------------------------------------------------------------------------------
# bit of cleaning to make it look better
pp <- cleanPlot(pp)
pp
ii<-1
jj<-2
colFactor     = factorList[ii]
subplotFactor = factorList[-ii]
subplotLevels = levels( dataframe[[subplotFactor]] )
nSubplots     = length( subplotLevels )
subDataframe <- dataframe[dataframe[[subplotFactor]]==subplotLevels[jj], ]
#---------------------------------------------------------------------------------
# generate the interaction plots
pp <- ggplot( subDataframe, aes_string( x = xFactor, y = outcome, colour = colFactor ) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , width = 0.2 , position = position_dodge(.5) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line" , aes_string(group= colFactor[jj]) , width = 0.2 , position = position_dodge(.5) )
pp <- pp + labs(x = xFactor, y = outcome, colour = colFactor[jj]) #+ theme(axis.text.x=element_text(angle=90, hjust=0))
#---------------------------------------------------------------------------------
# bit of cleaning to make it look better
pp <- cleanPlot(pp)
pp
summary(subDataframz)
summary(subDataframe)
xFactor
colFactor
outcome
source("d:/KULeuven/PhD/rLibrary/plotInteractionGraphs_level2.R")
dataframe <- accData1
outcome <- "correctness"
xFactor <- "nRep"
factorList <- c("classifier", "frequency")
plotInteractionGraphs_level2(dataframe, xFactor, outcome, factorList)
pp
summary(subDataframe)
colFactor
pp <- ggplot( subDataframe, aes_string( x = xFactor, y = outcome, colour = colFactor ) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , width = 0.2 , position = position_dodge(.5) )
pp
pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line", width = 0.2 , position = position_dodge(.5) )
pp <- pp + labs(x = xFactor, y = outcome, colour = colFactor[jj]) #+ theme(axis.text.x=element_text(angle=90, hjust=0))
pp
pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line" , aes_string(group= colFactor) , width = 0.2 , position = position_dodge(.5) )
pp <- ggplot( subDataframe, aes_string( x = xFactor, y = outcome, colour = colFactor ) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , width = 0.2 , position = position_dodge(.5) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line" , aes_string(group= colFactor) , width = 0.2 , position = position_dodge(.5) )
pp
pp <- pp + labs(x = xFactor, y = outcome, colour = colFactor[jj]) #+ theme(axis.text.x=element_text(angle=90, hjust=0))
pp
source("d:/KULeuven/PhD/rLibrary/plotInteractionGraphs_level2.R")
dataframe <- accData1
outcome <- "correctness"
xFactor <- "nRep"
factorList <- c("classifier", "frequency")
plotInteractionGraphs_level2(dataframe, xFactor, outcome, factorList)
dev.off()
source("d:/KULeuven/PhD/rLibrary/plotInteractionGraphs_level2.R")
dataframe <- accData1
outcome <- "correctness"
xFactor <- "nRep"
factorList <- c("classifier", "frequency")
plotInteractionGraphs_level2(dataframe, xFactor, outcome, factorList)
dev.off()
ii
jj
pp
pp <- ggplot( subDataframe, aes_string( x = xFactor, y = outcome, colour = colFactor ) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , width = 0.2 , position = position_dodge(.5) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line" , aes_string(group= colFactor) , width = 0.2 , position = position_dodge(.5) )
pp <- pp + labs(x = xFactor, y = outcome, colour = colFactor) #+ theme(axis.text.x=element_text(angle=90, hjust=0))
pp <- cleanPlot(pp)
pp
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
source("createDataFrame.R")
source("cleanPlot.R")
accData1 <- subset(accData, frequency!=0)
accData1 <- subset(accData1, select = -c(foldTest))
accData1$frequency <- droplevels(accData1)$frequency
accData1$condition <- droplevels(accData1)$condition
accData1$nRepFac <- as.factor(accData1$nRep)
str(accData1)
summary(accData1)
source("d:/KULeuven/PhD/rLibrary/plotInteractionGraphs_level2.R")
dataframe <- accData1
outcome <- "correctness"
xFactor <- "nRep"
factorList <- c("classifier", "frequency")
plotInteractionGraphs_level2(dataframe, xFactor, outcome, factorList)
dev.off()
ii<-1
summary(dataframz)
summary(dataframe)
for (ii in 1:length(factorList)){
dataframe[[factorList[ii]]] <- as.factor(dataframe[[factorList[ii]]])
}
summary(dataframe)
if (length(factorList) != 2){stop("not exactly 2 factors!!")}
dataframe[[xFactor]] <- as.factor(dataframe[[xFactor]])
summary(dataframe)
nPlots <- 0
nSubplotx <- 2
nSubploty <- 0
for (ii in 1:length(factorList)){
dataframe[[factorList[ii]]] <- as.factor(dataframe[[factorList[ii]]])
nPlots <- nPlots + length( levels( dataframe[[factorList[ii]]] ) )
nSubploty <- max( nSubploty, length( levels( dataframe[[factorList[ii]]] ) ) )
}
nPlots
nSubplotx
nSubploty
grid.newpage()
pushViewport( viewport( layout = grid.layout(nrow=length(nSubplotx), ncol=length(nSubploty)) ) )
for (ii in 1:length(factorList)) {
colFactor     = factorList[ii]
subplotFactor = factorList[-ii]
subplotLevels = levels( dataframe[[subplotFactor]] )
nSubplots     = length( subplotLevels )
for(jj in 1:nSubplots)
{
#       subDataframe <- subset( dataframe, subplotFactor==subplotLevels[jj]  )
subDataframe <- dataframe[dataframe[[subplotFactor]]==subplotLevels[jj], ]
#---------------------------------------------------------------------------------
# generate the interaction plots
pp <- ggplot( subDataframe, aes_string( x = xFactor, y = outcome, colour = colFactor ) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , width = 0.2 , position = position_dodge(.5) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line" , aes_string(group= colFactor) , width = 0.2 , position = position_dodge(.5) )
#       pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line", width = 0.2 , position = position_dodge(.5) )
pp <- pp + labs(x = xFactor, y = outcome, colour = colFactor) #+ theme(axis.text.x=element_text(angle=90, hjust=0))
#---------------------------------------------------------------------------------
# bit of cleaning to make it look better
pp <- cleanPlot(pp)
rowPos <- ii
#       rowPos <- which( factorList == colFactor[jj] )
#       if ( rowPos != length(factorList)) {
#         pp <- pp + theme(
#           axis.title.x = element_blank()
#           , axis.text.x = element_blank()
#         )
#       }
#       if ( ii != 1) {
#         pp <- pp + theme(
#           axis.title.y  = element_blank()
#           , axis.text.y   = element_blank()
#         )
#       }
#
#       # position the legend
#       if ( ii == 1 || (ii==2 && jj==1)) {
#         pp <- pp + theme(
#           legend.justification=c(1,0) #c(1,0)
#           , legend.position=c(1,0) #c(1,0)
#           , legend.background = element_rect(colour=NA, fill=NA)
#         )
#       }
#       else {
#         pp <- pp + theme(legend.position = "none")
#       }
#
#---------------------------------------------------------------------------------
# print the plot at the proper position in the grid
print(pp, vp = viewport(layout.pos.row = rowPos, layout.pos.col = jj) )
}
}
dev.off()
grid.newpage()
pushViewport( viewport( layout = grid.layout(nrow=length(nSubplotx), ncol=length(nSubploty)) ) )
ii<-1
jj<-1
colFactor     = factorList[ii]
subplotFactor = factorList[-ii]
subplotLevels = levels( dataframe[[subplotFactor]] )
nSubplots     = length( subplotLevels )
subDataframe <- dataframe[dataframe[[subplotFactor]]==subplotLevels[jj], ]
pp <- ggplot( subDataframe, aes_string( x = xFactor, y = outcome, colour = colFactor ) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , width = 0.2 , position = position_dodge(.5) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line" , aes_string(group= colFactor) , width = 0.2 , position = position_dodge(.5) )
#       pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line", width = 0.2 , position = position_dodge(.5) )
pp <- pp + labs(x = xFactor, y = outcome, colour = colFactor) #+ theme(axis.text.x=element_text(angle=90, hjust=0))
pp <- cleanPlot(pp)
rowPos <- ii
print(pp, vp = viewport(layout.pos.row = ii, layout.pos.col = jj) )
jj<-2
subDataframe <- dataframe[dataframe[[subplotFactor]]==subplotLevels[jj], ]
#---------------------------------------------------------------------------------
# generate the interaction plots
pp <- ggplot( subDataframe, aes_string( x = xFactor, y = outcome, colour = colFactor ) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , width = 0.2 , position = position_dodge(.5) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line" , aes_string(group= colFactor) , width = 0.2 , position = position_dodge(.5) )
#       pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line", width = 0.2 , position = position_dodge(.5) )
pp <- pp + labs(x = xFactor, y = outcome, colour = colFactor) #+ theme(axis.text.x=element_text(angle=90, hjust=0))
#---------------------------------------------------------------------------------
# bit of cleaning to make it look better
pp <- cleanPlot(pp)
print(pp, vp = viewport(layout.pos.row = ii, layout.pos.col = jj) )
print(pp, vp = viewport(layout.pos.row = ii, layout.pos.col = 1) )
dataframe <- accData1
factorList <- c("classifier", "nRep", "frequency")
outcome <- "correctness"
#---------------------------------------------------------------------------------
# set all variables as factors
for (ii in 1:length(factorList)){
dataframe[[factorList[ii]]] <- as.factor(dataframe[[factorList[ii]]])
}
dev.off()
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(factorList), length(factorList))))
ii<-1
xFactor <- factorList[ii]
#---------------------------------------------------------------------------------
# bar plots of averaged data wrt each levels of the factor
pp <- ggplot(dataframe, aes_string(x = xFactor, y = outcome))
pp <- pp + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black")
pp <- pp + stat_summary(fun.data = mean_cl_boot, geom = "pointrange")
#---------------------------------------------------------------------------------
# bit of cleaning to make it look better
pp <- cleanPlot(pp)
if ( ii != length(factorList)) {
pp <- pp + theme(
axis.title.x    = element_blank()
, axis.text.x   = element_blank()
)
}
if ( ii != 1) {
pp <- pp + theme(
axis.title.y  = element_blank()
, axis.text.y   = element_blank()
)
}
#---------------------------------------------------------------------------------
# print the plot at the proper position in the grid
print(pp, vp = viewport(layout.pos.row = ii, layout.pos.col = ii) )
length(factorList)
length(factorList)
dev.off()
source("d:/KULeuven/PhD/rLibrary/plotInteractionGraphs_level2.R")
dataframe <- accData1
outcome <- "correctness"
xFactor <- "nRep"
factorList <- c("classifier", "frequency")
plotInteractionGraphs_level2(dataframe, xFactor, outcome, factorList)
plotInteractionGraphs_level2(dataframe, xFactor, outcome, factorList)
subplotFactor
subplotLevels[jj]
toto<- sprintf("%s = %s", subplotFactor, subplotLevels[jj])
toto
plotInteractionGraphs_level2(dataframe, xFactor, outcome, factorList)
plotInteractionGraphs_level2(dataframe, xFactor, outcome, factorList)
dev.off()
pp
plotInteractionGraphs_level2(dataframe, xFactor, outcome, factorList)
plotInteractionGraphs_level2(dataframe, xFactor, outcome, factorList)
plotInteractionGraphs_level2(dataframe, xFactor, outcome, factorList)
dev.off()
dataframe[[xFactor]] <- as.factor(dataframe[[xFactor]])
nPlots <- 0
nSubplotx <- 2
nSubploty <- 0
temp <- 100   # CHANGE USE LDPLY
for (ii in 1:length(factorList)){
dataframe[[factorList[ii]]] <- as.factor(dataframe[[factorList[ii]]])
nPlots <- nPlots + length( levels( dataframe[[factorList[ii]]] ) )
nSubploty <- max( nSubploty, length( levels( dataframe[[factorList[ii]]] ) ) )
temp <- min( temp, length( levels( dataframe[[factorList[ii]]] ) ) )
}
ii<-1
jj<-1
colFactor     = factorList[ii]
subplotFactor = factorList[-ii]
subplotLevels = levels( dataframe[[subplotFactor]] )
nSubplots     = length( subplotLevels )
subDataframe <- dataframe[dataframe[[subplotFactor]]==subplotLevels[jj], ]
#---------------------------------------------------------------------------------
# generate the interaction plots
pp <- ggplot( subDataframe, aes_string( x = xFactor, y = outcome, colour = colFactor ) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , width = 0.2 , position = position_dodge(.5) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line" , aes_string(group= colFactor) , width = 0.2 , position = position_dodge(.5) )
#       pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line", width = 0.2 , position = position_dodge(.5) )
pp <- pp + labs(x = xFactor
, y = outcome
, colour = colFactor
, title = sprintf("%s = %s", subplotFactor, subplotLevels[jj]) #+ theme(axis.text.x=element_text(angle=90, hjust=0))
)
pp
pp <- cleanPlot(pp)
pp
dev.off()
plotInteractionGraphs_level2(dataframe, xFactor, outcome, factorList)
source('D:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-ter-p3Classification/test/test.R', echo=TRUE)
dev.off()
source('D:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-ter-p3Classification/test/test.R', echo=TRUE)
datos=read.csv("paterna.dat",sep=";",header=T,na.strings="-99.9")
??paterna
source('~/.active-rstudio-document', echo=TRUE)
library(png)
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
dataframe <- accData1
factorList <- c("classifier", "nRep", "frequency")
outcome <- "correctness"
plotFactorMeans_InteractionGraphs(dataframe, factorList, outcome)
plotFactorMeans_InteractionGraphs(dataframe, factorList, outcome)
source("d:/KULeuven/PhD/rLibrary/plotInteractionGraphs_level2.R")
dataframe <- accData1
outcome <- "correctness"
xFactor <- "nRep"
factorList <- c("classifier", "frequency")
dev.off()
library(ggplot2)
library(reshape2)
for (ii in 1:length(factorList)){
dataframe[[factorList[ii]]] <- as.factor(dataframe[[factorList[ii]]])
}
#---------------------------------------------------------------------------------
# initialize the plot grid
grid.newpage()
pushViewport(viewport(layout = grid.layout(length(factorList), length(factorList))))
ii <-1
jj<-1
xFactor <- factorList[ii]
#---------------------------------------------------------------------------------
# bar plots of averaged data wrt each levels of the factor
pp <- ggplot(dataframe, aes_string(x = xFactor, y = outcome))
pp <- pp + stat_summary(fun.y = mean, geom = "bar", fill = "White", colour = "Black")
pp <- pp + stat_summary(fun.data = mean_cl_boot, geom = "pointrange")
dev.off()
if (length(factorList) != 2){stop("not exactly 2 factors!!")}
#---------------------------------------------------------------------------------
# set all variables as factors
dataframe[[xFactor]] <- as.factor(dataframe[[xFactor]])
nPlots <- 0
nSubplotx <- 2
nSubploty <- 0
temp <- 100   # CHANGE USE LDPLY
for (ii in 1:length(factorList)){
dataframe[[factorList[ii]]] <- as.factor(dataframe[[factorList[ii]]])
nPlots <- nPlots + length( levels( dataframe[[factorList[ii]]] ) )
nSubploty <- max( nSubploty, length( levels( dataframe[[factorList[ii]]] ) ) )
temp <- min( temp, length( levels( dataframe[[factorList[ii]]] ) ) )
}
#---------------------------------------------------------------------------------
# initialize the plot grid
grid.newpage()
pushViewport(viewport(layout = grid.layout(nSubplotx, nSubploty)))
colFactor     = factorList[ii]
subplotFactor = factorList[-ii]
subplotLevels = levels( dataframe[[subplotFactor]] )
nSubplots     = length( subplotLevels )
subDataframe <- dataframe[dataframe[[subplotFactor]]==subplotLevels[jj], ]
#---------------------------------------------------------------------------------
# generate the interaction plots
pp <- ggplot( subDataframe, aes_string( x = xFactor, y = outcome, colour = colFactor ) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , width = 0.2 , position = position_dodge(.5) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line" , aes_string(group= colFactor) , width = 0.2 , position = position_dodge(.5) )
#       pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line", width = 0.2 , position = position_dodge(.5) )
pp <- pp + labs(x = xFactor
, y = outcome
, colour = colFactor
, title = sprintf("%s = %s", subplotFactor, subplotLevels[jj]) #+ theme(axis.text.x=element_text(angle=90, hjust=0))
)
pp <- cleanPlot(pp)
dev.off()
pp
summary(subDataframe)
xFactor
source("d:/KULeuven/PhD/rLibrary/plotInteractionGraphs_level2.R")
dataframe <- accData1
outcome <- "correctness"
xFactor <- "nRep"
factorList <- c("classifier", "frequency")
pp
xFactor
if (length(factorList) != 2){stop("not exactly 2 factors!!")}
#---------------------------------------------------------------------------------
# set all variables as factors
dataframe[[xFactor]] <- as.factor(dataframe[[xFactor]])
nPlots <- 0
nSubplotx <- 2
nSubploty <- 0
temp <- 100   # CHANGE USE LDPLY
for (ii in 1:length(factorList)){
dataframe[[factorList[ii]]] <- as.factor(dataframe[[factorList[ii]]])
nPlots <- nPlots + length( levels( dataframe[[factorList[ii]]] ) )
nSubploty <- max( nSubploty, length( levels( dataframe[[factorList[ii]]] ) ) )
temp <- min( temp, length( levels( dataframe[[factorList[ii]]] ) ) )
}
colFactor     = factorList[ii]
subplotFactor = factorList[-ii]
subplotLevels = levels( dataframe[[subplotFactor]] )
nSubplots     = length( subplotLevels )
subDataframe <- dataframe[dataframe[[subplotFactor]]==subplotLevels[jj], ]
#---------------------------------------------------------------------------------
# generate the interaction plots
pp <- ggplot( subDataframe, aes_string( x = xFactor, y = outcome, colour = colFactor ) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , width = 0.2 , position = position_dodge(.5) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line" , aes_string(group= colFactor) , width = 0.2 , position = position_dodge(.5) )
#       pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line", width = 0.2 , position = position_dodge(.5) )
pp <- pp + labs(x = xFactor
, y = outcome
, colour = colFactor
, title = sprintf("%s = %s", subplotFactor, subplotLevels[jj]) #+ theme(axis.text.x=element_text(angle=90, hjust=0))
)
pp
pp <- cleanPlot(pp)
pp
grid.newpage()
pushViewport(viewport(layout = grid.layout(nSubplotx, nSubploty)))
print(pp, vp = viewport(layout.pos.row = ii, layout.pos.col = jj) )
ii
jj
ii<-1
print(pp, vp = viewport(layout.pos.row = ii, layout.pos.col = jj) )
#---------------------------------------------------------------------------------
# check input data
if (length(factorList) != 2){stop("not exactly 2 factors!!")}
#---------------------------------------------------------------------------------
# set all variables as factors
dataframe[[xFactor]] <- as.factor(dataframe[[xFactor]])
nPlots <- 0
nSubplotx <- 2
nSubploty <- 0
temp <- 100   # CHANGE USE LDPLY
for (ii in 1:length(factorList)){
dataframe[[factorList[ii]]] <- as.factor(dataframe[[factorList[ii]]])
nPlots <- nPlots + length( levels( dataframe[[factorList[ii]]] ) )
nSubploty <- max( nSubploty, length( levels( dataframe[[factorList[ii]]] ) ) )
temp <- min( temp, length( levels( dataframe[[factorList[ii]]] ) ) )
}
#---------------------------------------------------------------------------------
# initialize the plot grid
grid.newpage()
pushViewport(viewport(layout = grid.layout(nSubplotx, nSubploty)))
#---------------------------------------------------------------------------------
# Start the plot
iPlot <- 1
for (ii in 1:length(factorList)) {
colFactor     = factorList[ii]
subplotFactor = factorList[-ii]
subplotLevels = levels( dataframe[[subplotFactor]] )
nSubplots     = length( subplotLevels )
for(jj in 1:nSubplots)
{
#       subDataframe <- subset( dataframe, subplotFactor==subplotLevels[jj]  )
subDataframe <- dataframe[dataframe[[subplotFactor]]==subplotLevels[jj], ]
#---------------------------------------------------------------------------------
# generate the interaction plots
pp <- ggplot( subDataframe, aes_string( x = xFactor, y = outcome, colour = colFactor ) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , width = 0.2 , position = position_dodge(.5) )
pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line" , aes_string(group= colFactor) , width = 0.2 , position = position_dodge(.5) )
#       pp <- pp + stat_summary( fun.data = mean_cl_boot , geom = "line", width = 0.2 , position = position_dodge(.5) )
pp <- pp + labs(x = xFactor
, y = outcome
, colour = colFactor
, title = sprintf("%s = %s", subplotFactor, subplotLevels[jj]) #+ theme(axis.text.x=element_text(angle=90, hjust=0))
)
#---------------------------------------------------------------------------------
# bit of cleaning to make it look better
pp <- cleanPlot(pp)
#       if ( ii != length(nSubplotx) && jj <= temp) {
#         pp <- pp + theme(
#           axis.title.x = element_blank()
#           , axis.text.x = element_blank()
#         )
#       }
#       if ( jj != 1) {
#         pp <- pp + theme(
#           axis.title.y  = element_blank()
#           , axis.text.y   = element_blank()
#         )
#       }
#
#       # position the legend
#       if ( jj==1 ) {
#         pp <- pp + theme(
#           legend.justification=c(1,0) #c(1,0)
#           , legend.position=c(1,0) #c(1,0)
#           , legend.background = element_rect(colour=NA, fill=NA)
#         )
#       }
#       else {
#         pp <- pp + theme(legend.position = "none")
#       }
# title
#       pp <- pp + theme(plot.title = sprintf("%s = %s", subplotFactor, subplotLevels[jj]))
#       pp <- pp + theme(title = "BKABKABKABKABZK")
#---------------------------------------------------------------------------------
# print the plot at the proper position in the grid
print(pp, vp = viewport(layout.pos.row = ii, layout.pos.col = jj) )
}
}

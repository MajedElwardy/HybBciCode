library(LMERConvenienceFunctions)
library(languageR)
#################################################################################################################
iS <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_1RunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
accData1$targetFrequency <- as.factor(accData1$targetFrequency)
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nAverages, correctness, colour=targetFrequency, shape=targetFrequency) )
pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
iS<-1
nRunsForTrain <- 1
filename <- sprintf("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-classify-erps/linSvm_%dRunsForTrain/subject_S%d/Results_forLogisiticRegression.txt", nRunsForTrain, iS)
accData1 <- read.csv(filename, header = TRUE, sep = ",", strip.white = TRUE)
str(accData1)
summary(accData1)
library(nlme)
library(lme4)
library(nlme)
packageDescription("(nlme")["Version"]
packageDescription("nlme")["Version"]
inst <- packageStatus()$inst
inst
summary(inst)
inst[inst$Status != "ok",]
inst[inst$Status != "ok", c("Package", "Version", "Status")]
update.packages()
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
library(reshape2)
library(car)
source("createDataFrame.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
aveClass <- 0
nRunsForTrain <- 2
FS <- 128
nFoldSvm <- 10
accData <- createDataFrame(aveClass, nRunsForTrain, FS, nFoldSvm)
accData <- accData[accData$subject != "S08", ]
accData$subject <- droplevels(accData$subject)
#################################################################################################################
varList <- c("subject", "frequency", "trial", "nRep", "correctness")
accData <- accData[ accData$classifier=="normal", names(accData) %in% varList ]
accData <- accData[, varList]
accData$nRepFac <- as.factor(accData$nRep)
accData <- accData[with(accData, order(subject, frequency, trial, nRep)), ]
str(accData)
summary(accData)
#################################################################################################################
# pp <- ggplot( accData, aes(nRep, correctness, colour=frequency, shape=frequency) )
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp
pp <- ggplot( accData, aes(nRep, correctness, colour=frequency, shape=frequency) )
pp <- pp + stat_summary(fun.y = mean, geom = "point")
pp <- pp + stat_summary(fun.y = mean, geom = "line", aes(group=frequency))
pp <- pp + facet_wrap( ~subject )
pp <- cleanPlot(pp)
pp
pp <- ggplot( accData, aes(nRep, correctness, colour=frequency, shape=frequency) )
pp <- pp + stat_summary(fun.y = mean, geom = "point", position = position_dodge(.3))
pp <- pp + stat_summary(fun.y = mean, geom = "line", aes(group=frequency), position = position_dodge(.3))
pp <- pp + facet_wrap( ~subject )
pp <- cleanPlot(pp)
pp
pp <- ggplot( accData, aes(nRep, correctness, colour=frequency) )
pp <- pp + stat_summary(fun.y = mean, geom = "point", position = position_dodge(.3), size=3)
# pp <- pp + stat_summary(fun.y = mean, geom = "line", aes(group=frequency), position = position_dodge(.3))
pp <- pp + facet_wrap( ~subject )
pp <- cleanPlot(pp)
pp
pp <- ggplot( accData, aes(nRepFac, correctness, colour=frequency) )
pp <- pp + stat_summary(fun.y = mean, geom = "point", position = position_dodge(.3), size=3)
# pp <- pp + stat_summary(fun.y = mean, geom = "line", aes(group=frequency), position = position_dodge(.3))
pp <- pp + facet_wrap( ~subject )
pp <- cleanPlot(pp)
pp
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
source("createDataFrame.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
aveClass <- 0
nRunsForTrain <- 2
FS <- 128
nFoldSvm <- 10
accData <- createDataFrame(aveClass, nRunsForTrain, FS, nFoldSvm)
accData <- accData[accData$subject != "S08", ]
accData$subject <- droplevels(accData$subject)
str(accData)
summary(accData)
#################################################################################################################
# accData1 <- subset(accData, classifier=="normal")
# accData1 <- subset(accData1, select = -c(classifier, foldTest))
varList <- c("subject", "frequency", "trial", "nRep", "correctness", "condition", "roundNb", "nRepWithinSub")
accData1 <- accData[ accData$classifier=="normal", names(accData) %in% varList ]
accData1$nRepFac <- as.factor(accData1$nRep)
# accData1 <- accData1[ accData1$subject!="S9", ]
# accData1$subject <- droplevels(accData1$subject)
accData1 <- accData1[with(accData1, order(subject, frequency, trial, nRep)), ]
str(accData1)
summary(accData1)
#################################################################################################################
pp <- ggplot( accData1, aes(nRep, correctness, colour=condition, shape=condition) )
# pp <- pp + stat_summary(fun.y = mean, geom="point",  position = position_jitter(w = 0.2, h = 0), size = 3)
# pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(.5))
pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
pp <- pp + facet_wrap( ~subject )
pp <- cleanPlot(pp)
# pp <- pp + theme(legend.position=c(0.8334,0.1667))
pp
#################################################################################################################
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
plotFactorMeans_InteractionGraphs(accData1, c("nRep", "frequency"), "correctness")
#################################################################################################################
f0Vs857_10_12_15    = c(-4, 1, 1, 1, 1)     # oddball vs. hybrid
f857Vs10_12_15      = c(0, -3, 1, 1, 1)     # hybrid-8-57Hz vs. hybrid-10-12-15-Hz
f10Vs12_15          = c(0, 0, -2, 1, 1)     # hybrid-10Hz vs. hybrid-12-15-Hz
f12Vs15             = c(0, 0, 0, -1, 1)     # hybrid-12Hz vs. hybrid-15-Hz
contrasts(accData1$frequency) <- cbind(
f0Vs857_10_12_15
, f857Vs10_12_15
, f10Vs12_15
, f12Vs15
)
allReps <- unique(accData1$nRep)
nReps <- length(allReps)
pVals0 <- vector(mode="numeric", length=nReps)
pVals <- vector(mode="numeric", length=nReps)
###############################################################################################################
###############################################################################################################
for (iR in 1:nReps)
{
subData <- accData1[accData1$nRep==iR,]
lmH0 <- lmer( correctness ~ frequency + ( 1 | subject ), data = subData, family = binomial )
lmH1 <- lmer( correctness ~ frequency + ( 1 | subject/frequency ), data = subData, family = binomial )
#   tete <- pacf( resid( lmH1 ) )
#   plot( fitted(lmH1), residuals(lmH1) )
#   abline(h=0)
lmH2 <- lmer( correctness ~ 1 + ( 1 | subject/frequency ), data = subData, family = binomial )
temp <- anova(lmH0, lmH1)
pVals0[iR] <- temp[2,7]
temp <- anova(lmH1, lmH2)
pVals[iR] <- temp[2,7]
}
pVals0
subData <- accData1[accData1$nRep==1,]
pp<-ggplot(subData, aes(frequency, correctness))
pp<-pp + stat_summary(fun.y=mean, geom=("point"))
pp<-pp + stat_summary(fun.y=mean, geom=("line"), aes(group=1), size=2)
pp<-pp + stat_summary(fun.y=mean, geom=("point"), aes(group=subject, colour=subject))
pp<-pp + stat_summary(fun.y=mean, geom=("line"), aes(group=subject, colour=subject))
pp
iR = 2
subData <- accData1[accData1$nRep==2,]
pp<-ggplot(subData, aes(frequency, correctness))
pp<-pp + stat_summary(fun.y=mean, geom=("point"))
pp<-pp + stat_summary(fun.y=mean, geom=("line"), aes(group=1), size=2)
pp<-pp + stat_summary(fun.y=mean, geom=("point"), aes(group=subject, colour=subject))
pp<-pp + stat_summary(fun.y=mean, geom=("line"), aes(group=subject, colour=subject))
pp
subData <- accData1[accData1$nRep==iR,]
lmH0 <- lmer( correctness ~ frequency + ( 1 | subject ), data = subData, family = binomial )
lmH1 <- lmer( correctness ~ frequency + ( 1 | subject/frequency ), data = subData, family = binomial )
#   tete <- pacf( resid( lmH1 ) )
#   plot( fitted(lmH1), residuals(lmH1) )
#   abline(h=0)
lmH2 <- lmer( correctness ~ 1 + ( 1 | subject/frequency ), data = subData, family = binomial )
lmH0
36*5*9
logitFun <- function(x){ return( logit( mean(x) ) )}
pp2<-ggplot(subData, aes(frequency, correctness))
pp2<-pp2 + stat_summary(fun.y=logitFun, geom=("point"))
pp2<-pp2 + stat_summary(fun.y=logitFun, geom=("line"), aes(group=1), size=2)
pp2<-pp2 + stat_summary(fun.y=logitFun, geom=("point"), aes(group=subject, colour=subject))
pp2<-pp2 + stat_summary(fun.y=logitFun, geom=("line"), aes(group=subject, colour=subject))
pp2
lmH0
lmH1
subData$fitted <- fitted(lmH0)
subData[1:100,]
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP/02-xxx-p3Classification/")
rm(list = ls())
library(ggplot2)
library(lme4)
library(LMERConvenienceFunctions)
library(languageR)
library(reshape2)
library(car)
source("createDataFrame.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
aveClass <- 0
nRunsForTrain <- 2
FS <- 128
nFoldSvm <- 10
accData <- createDataFrame(aveClass, nRunsForTrain, FS, nFoldSvm)
accData <- accData[accData$subject != "S08", ]
accData$subject <- droplevels(accData$subject)
#################################################################################################################
varList <- c("subject", "frequency", "trial", "nRep", "correctness")
accData <- accData[ accData$classifier=="normal", names(accData) %in% varList ]
accData <- accData[, varList]
accData$nRepFac <- as.factor(accData$nRep)
accData <- accData[with(accData, order(subject, frequency, trial, nRep)), ]
str(accData)
summary(accData)
#################################################################################################################
# pp <- ggplot( accData, aes(nRep, correctness, colour=frequency, shape=frequency) )
# pp <- pp + stat_summary(fun.data = mean_cl_normal, geom = "pointrange", width = 0.2, position = position_dodge(.5), size = 1)
# pp <- pp + facet_wrap( ~subject )
# pp <- cleanPlot(pp)
# pp
pp <- ggplot( accData, aes(nRepFac, correctness, colour=frequency) )
pp <- pp + stat_summary(fun.y = mean, geom = "point", position = position_dodge(.3), size=3)
# pp <- pp + stat_summary(fun.y = mean, geom = "line", aes(group=frequency), position = position_dodge(.3))
pp <- pp + facet_wrap( ~subject )
pp <- cleanPlot(pp)
pp
varList <- c("subject", "frequency", "nRep")
dataToPlot <- ddply(
accData
, varList
, summarise
, prob = mean(correctness)
, odd = mean(correctness)/(1-mean(correctness))
, logit1 = log(mean(correctness)/(1-mean(correctness)))
, logit2 = logit(mean(correctness))
)
dataToPlot$nRepFac <- as.factor(dataToPlot$nRep)
dataToPlot$nRepLog <- log(dataToPlot$nRep)
ppLogit <- ggplot( dataToPlot, aes(nRepFac, logit2, colour=frequency) ) #, shape=frequency) )
ppLogit <- ppLogit + geom_point(position = position_dodge(.3), size=3)
# ppLogit <- ppLogit + geom_line(aes(group=frequency))
ppLogit <- ppLogit + facet_wrap( ~subject )
ppLogit <- cleanPlot(ppLogit)
ppLogit
ppLogit2 <- ggplot( dataToPlot, aes(nRep, logit2, colour=frequency, shape=frequency) )
ppLogit2 <- ppLogit2 + stat_summary(fun.y = mean, geom = "line", aes(group=frequency))
ppLogit2 <- cleanPlot(ppLogit2)
ppLogit2
dataToPlot$nRepLog <- log(dataToPlot$nRep)
ppLogit3 <- ggplot( dataToPlot, aes(nRepLog, logit2, colour=frequency, shape=frequency) )
# ppLogit <- ppLogit + geom_point(position = position_dodge(.5)) + geom_line(aes(group=frequency),position = position_dodge(.5))
ppLogit3 <- ppLogit3 + geom_line(aes(group=frequency))
ppLogit3 <- ppLogit3 + facet_wrap( ~subject )
ppLogit3 <- cleanPlot(ppLogit3)
ppLogit3
ppLogit4 <- ggplot( dataToPlot, aes(nRepLog, logit2, colour=frequency, shape=frequency) )
ppLogit4 <- ppLogit4 + stat_summary(fun.y = mean, geom = "point")
ppLogit4 <- ppLogit4 + stat_summary(fun.y = mean, geom = "line", aes(group=frequency))
ppLogit4 <- cleanPlot(ppLogit4)
ppLogit4
source("d:/KULeuven/PhD/rLibrary/plotFactorMeans_InteractionGraphs.R")
plotFactorMeans_InteractionGraphs(accData, c("nRep", "frequency"), "correctness")
#################################################################################################################
f0Vs857_10_12_15    = c(-4, 1, 1, 1, 1)     # oddball vs. hybrid
f857Vs10_12_15      = c(0, -3, 1, 1, 1)     # hybrid-8-57Hz vs. hybrid-10-12-15-Hz
f10Vs12_15          = c(0, 0, -2, 1, 1)     # hybrid-10Hz vs. hybrid-12-15-Hz
f12Vs15             = c(0, 0, 0, -1, 1)     # hybrid-12Hz vs. hybrid-15-Hz
contrasts(accData$frequency) <- cbind(
f0Vs857_10_12_15
, f857Vs10_12_15
, f10Vs12_15
, f12Vs15
)
Rep1VsRep2 = c(-1, 1, 0, 0, 0, 0, 0, 0, 0, 0)
Rep2VsRep3 = c(0, -1, 1, 0, 0, 0, 0, 0, 0, 0)
Rep3VsRep4 = c(0, 0, -1, 1, 0, 0, 0, 0, 0, 0)
Rep4VsRep5 = c(0, 0, 0, -1, 1, 0, 0, 0, 0, 0)
Rep5VsRep6 = c(0, 0, 0, 0, -1, 1, 0, 0, 0, 0)
Rep6VsRep7 = c(0, 0, 0, 0, 0, -1, 1, 0, 0, 0)
Rep7VsRep8 = c(0, 0, 0, 0, 0, 0, -1, 1, 0, 0)
Rep8VsRep9 = c(0, 0, 0, 0, 0, 0, 0, -1, 1, 0)
Rep9VsRep10 = c(0, 0, 0, 0, 0, 0, 0, 0, -1, 1)
contrasts(accData$nRepFac) <- cbind(
Rep1VsRep2
, Rep2VsRep3
, Rep3VsRep4
, Rep4VsRep5
, Rep5VsRep6
, Rep6VsRep7
, Rep7VsRep8
, Rep8VsRep9
, Rep9VsRep10
)
# varList <- c("subject", "frequency", "nRep", "nRepFac")
# countData <- ddply(accData, varList, summarise, nCorrect = sum(correctness))
# lmH2 <- glmer( nCorrect ~ frequency * nRepFac + ( 1 | subject ), data = countData, family = binomial )
lmH1 <- glmer( correctness ~ frequency * nRep + ( 1 | subject ), data = accData, family = binomial )
accData$fitted  <- fitted(lmH1)
accData$res     <- residuals(lmH1)
varList <- c("subject", "frequency", "nRep")
temp <- ddply(
accData
, varList
, summarise
, logitObs = logit(mean(correctness))
, logitFit = logit(mean(fitted))
, logitRes = logit(mean(res))
)
varList <- c("subject", "frequency", "nRep")
temp <- ddply(
accData
, varList
, summarise
, logitObs = logit(mean(correctness))
, logitFit = logit(mean(fitted))
)
temp
varList <- c("subject", "frequency", "nRep")
temp <- ddply(
accData
, varList
, summarise
, logitObs = logit(mean(correctness))
, logitFit = logit(mean(fitted))
, res      = mean(res)
)
temp
rm(list=ls'')
rm(list=ls(''))
rm(list=ls(''))
rm(list=ls())
Fs<-128
nFoldSvm<-10
iS<-1
tablename <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/01-preprocess-plot/watchErpDataset.csv"
filelist <- read.csv(tablename, header = TRUE, sep = ",", strip.white = TRUE)
sub <- unique(filelist$subjectTag)
nSub <- length(sub)
########################################################################################################################################
run = unique( filelist$run )
if ( !identical(run, 1:max(run)) ){ stop("wrong run numbering") }
listRunsForTrain <- list( 1, 2, 3, c(1, 2), c(2, 3), c(3, 4), c(1,2,3), c(2,3,4) )
# listRunsForTrain <- list( c(1, 2) )
listTestRun <- lapply( listRunsForTrain, function(x, param) y <- param[param>max(x)], 1:8 )
########################################################################################################################################
resDir <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciProcessedData/watchERP_2stim/02-xxx-classify-erps"
p3file <- file.path( resDir
, sprintf("linSvm_%dHz%.2dcvSVM", Fs, nFoldSvm)
, sprintf("subject_%s", sub[iS])
, "ResultsClassification.txt")
p3Dataset_iS <- read.csv(p3file, header = TRUE, sep = ",", strip.white = TRUE)
p3file
p3file <- file.path( resDir
, sprintf("linSvm_%dHz_%.2dcvSVM", Fs, nFoldSvm)
, sprintf("subject_%s", sub[iS])
, "ResultsClassification.txt")
p3Dataset_iS <- read.csv(p3file, header = TRUE, sep = ",", strip.white = TRUE)
summary(p3Dataset_iS)
str(p3Dataset_iS)
p3Dataset_iS$runsForTrain     <- as.factor(p3Dataset_iS$trainingRuns)
p3Dataset_iS$testingRun       <- as.factor(p3Dataset_iS$testingRun)
p3Dataset_iS$roundNb          <- as.factor(p3Dataset_iS$roundNb)
p3Dataset_iS$targetFrequency  <- as.factor(p3Dataset_iS$targetFrequency)
p3Dataset_iS$trial            <- p3Dataset_iS$testingRun : p3Dataset_iS$roundNb
p3Dataset_iS <- p3Dataset_iS[, c("runsForTrain", "subject", "trial", "nRep", "correctness", "targetFrequency", "testingRun", "roundNb")]
p3Dataset_iS <- p3Dataset_iS[, name %in% c("runsForTrain", "subject", "trial", "nRep", "correctness", "targetFrequency", "testingRun", "roundNb")]
p3Dataset_iS <- p3Dataset_iS[, name(p3Dataset_iS) %in% c("runsForTrain", "subject", "trial", "nRep", "correctness", "targetFrequency", "testingRun", "roundNb")]
p3Dataset_iS <- p3Dataset_iS[, names(p3Dataset_iS) %in% c("runsForTrain", "subject", "trial", "nRep", "correctness", "targetFrequency", "testingRun", "roundNb")]
summary(p3Dataset_iS)
p3Dataset_iS <- p3Dataset_iS[, varList]
varList <- c("runsForTrain", "subject", "trial", "nRep", "correctness", "targetFrequency", "testingRun", "roundNb")
p3Dataset_iS <- p3Dataset_iS[, varList]
p3Dataset_iS$nRep             <- as.factor(p3Dataset_iS$nAverages)
p3Dataset_iS <- read.csv(p3file, header = TRUE, sep = ",", strip.white = TRUE)
p3Dataset_iS$runsForTrain     <- as.factor(p3Dataset_iS$trainingRuns)
p3Dataset_iS$testingRun       <- as.factor(p3Dataset_iS$testingRun)
p3Dataset_iS$roundNb          <- as.factor(p3Dataset_iS$roundNb)
p3Dataset_iS$nRep             <- as.factor(p3Dataset_iS$nAverages)
p3Dataset_iS$targetFrequency  <- as.factor(p3Dataset_iS$targetFrequency)
p3Dataset_iS$trial            <- p3Dataset_iS$testingRun : p3Dataset_iS$roundNb
varList <- c("runsForTrain", "subject", "trial", "nRep", "correctness", "targetFrequency", "testingRun", "roundNb")
p3Dataset_iS <- p3Dataset_iS[, varList]
summary(p3_Dataset_iS)
summary(p3Dataset_iS)
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-xxx-classify-erps/")
rm(list = ls())
library(ggplot2)
source("createP3CorrectnessDataset.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
# figDir = "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciResults/watchERP_2stim/02-classify-erps/"
FS <- 128
nFoldSvm <- 10
source("createP3CorrectnessDataset.R")
p3Dataset <- createP3CorrectnessDataset(FS, nFoldSvm)
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-xxx-classify-erps/")
rm(list = ls())
library(ggplot2)
source("createP3CorrectnessDataset.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
# figDir = "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciResults/watchERP_2stim/02-classify-erps/"
FS <- 128
nFoldSvm <- 10
source("createP3CorrectnessDataset.R")
p3Dataset <- createP3CorrectnessDataset(FS, nFoldSvm)
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-xxx-classify-erps/")
rm(list = ls())
library(ggplot2)
source("createP3CorrectnessDataset.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
# figDir = "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciResults/watchERP_2stim/02-classify-erps/"
FS <- 128
nFoldSvm <- 10
source("createP3CorrectnessDataset.R")
p3Dataset <- createP3CorrectnessDataset(FS, nFoldSvm)
summary(p3Dataset)
str(p3Dataset)
pp <- ggplot( p3Dataset, aes(nRep, correctness, colour=condition ) )
pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(0.4), shape = 20, size = 3)
pp <- pp + stat_summary(fun.y = mean, geom="line", position = position_dodge(0.4))
pp <- pp + ylim(0, 1)
pp <- cleanPlot(pp)
print(pp)
pp <- ggplot( p3Dataset, aes(nRep, correctness, colour=runsForTrain ) )
pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(0.4), shape = 20, size = 3)
pp <- pp + stat_summary(fun.y = mean, geom="line", position = position_dodge(0.4))
pp <- pp + ylim(0, 1)
pp <- cleanPlot(pp)
print(pp)
pp <- ggplot( p3Dataset, aes(nRep, correctness, colour=runsForTrain ) )
pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(0.4), shape = 20, size = 3)
pp <- pp + stat_summary(fun.y = mean, geom="line", position = position_dodge(0.4), aes(group=runsForTrain))
pp <- pp + ylim(0, 1)
pp <- cleanPlot(pp)
print(pp)
pp <- ggplot( p3Dataset, aes(nRep, correctness, colour=runsForTrain ) )
pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(0.4), shape = 20, size = 3)
pp <- pp + stat_summary(fun.y = mean, geom="line", position = position_dodge(0.4))
pp <- pp + facet_wrap( ~subject )
pp <- pp + ylim(0, 1)
pp <- cleanPlot(pp)
print(pp)
pp <- ggplot( p3Dataset, aes(nRep, correctness, colour=runsForTrain ) )
pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(0.4), shape = 20, size = 3)
pp <- pp + stat_summary(fun.y = mean, geom="line", position = position_dodge(0.4), group=runsForTrain)
pp <- pp + facet_wrap( ~subject )
pp <- pp + ylim(0, 1)
pp <- cleanPlot(pp)
print(pp)
pp <- ggplot( p3Dataset, aes(nRep, correctness, colour=runsForTrain ) )
pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(0.4), shape = 20, size = 3)
pp <- pp + stat_summary(fun.y = mean, geom="line", position = position_dodge(0.4), aes(group=runsForTrain))
pp <- pp + facet_wrap( ~subject )
pp <- pp + ylim(0, 1)
pp <- cleanPlot(pp)
print(pp)
source('D:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-xxx-classify-erps/plotP3Correctness.R', echo=TRUE)
source('D:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-xxx-classify-erps/plotP3Correctness.R', echo=TRUE)
setwd("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-xxx-classify-erps/")
rm(list = ls())
library(ggplot2)
source("createP3CorrectnessDataset.R")
source("d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/deps/cleanPlot.R")
# figDir = "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciResults/watchERP_2stim/02-classify-erps/"
FS <- 128
nFoldSvm <- 10
source("createP3CorrectnessDataset.R")
p3Dataset <- createP3CorrectnessDataset(FS, nFoldSvm)
figDir  <- "d:/KULeuven/PhD/Work/Hybrid-BCI/HybBciResults/watchERP_2stim/02-xxx-classify-erps"
dir.create(figDir, showWarnings=FALSE)
folder      <- sprintf("LinSvm_%dHz_%.2dcvSvm", FS, nFoldSvm)
# if (aveClass != 0){ folder  <- sprintf("%s_%.2dAveClassifier.txt", folder, aveClass) }
figDir  <- file.path(figDir, folder)
source('D:/KULeuven/PhD/Work/Hybrid-BCI/HybBciCode/dataAnalysisCodes/watchERP_2stim/02-xxx-classify-erps/plotP3Correctness.R', echo=TRUE)
summary(p3Dataset)
conds
iC
conds[iC]
subDataset <- p3Dataset[ p3Dataset[ , "runsForTrain"] == conds[iC],  ]
conds[iC]
subDataset <- p3Dataset[ p3Dataset$runsForTrain == conds[iC],  ]
str(p3Dataset)
subDataset <- p3Dataset[ p3Dataset$runsForTrain == "train34",  ]
subDataset <- p3Dataset[ p3Dataset$runsForTrain == "train12",  ]
subDataset <- p3Dataset[ p3Dataset$runsForTrain == "train1",  ]
subDataset <- p3Dataset[ p3Dataset[ , "runsForTrain"] == conds[iC],  ]
subDataset <- p3Dataset[ p3Dataset$runsForTrain == conds[iC],  ]
pp <- ggplot( subDataset, aes(nRep, correctness, colour=targetFrequency ) )
pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(0.4), shape = 20, size = 3)
pp <- pp + stat_summary(fun.y = mean, geom="line", position = position_dodge(0.4))
pp <- pp + facet_wrap( ~subject )
pp <- pp + ylim(0, 1)
pp <- cleanPlot(pp)
print(pp)
print(pp)
pp
subDataset <- p3Dataset[ p3Dataset$runsForTrain == conds[iC],  ]
pp <- ggplot( subDataset, aes(nRep, correctness, colour=targetFrequency ) )
pp <- pp + stat_summary(fun.y = mean, geom="point", position = position_dodge(0.4), shape = 20, size = 3)
pp
pp <- pp + facet_wrap( ~subject )
pp
